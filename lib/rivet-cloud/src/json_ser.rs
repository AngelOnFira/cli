// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_game_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_1) = &input.developer_group_id {
		object.key("developer_group_id").string(var_1.as_str());
	}
	if let Some(var_2) = &input.display_name {
		object.key("display_name").string(var_2.as_str());
	}
	if let Some(var_3) = &input.name_id {
		object.key("name_id").string(var_3.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_build_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameBuildInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_4) = &input.display_name {
		object.key("display_name").string(var_4.as_str());
	}
	if let Some(var_5) = &input.image_file {
		let mut object_6 = object.key("image_file").start_object();
		crate::json_ser::serialize_structure_crate_model_upload_prepare_file(&mut object_6, var_5)?;
		object_6.finish();
	}
	if let Some(var_7) = &input.image_tag {
		object.key("image_tag").string(var_7.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_cdn_site_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameCdnSiteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_8) = &input.display_name {
		object.key("display_name").string(var_8.as_str());
	}
	if let Some(var_9) = &input.files {
		let mut array_10 = object.key("files").start_array();
		for item_11 in var_9 {
			{
				let mut object_12 = array_10.value().start_object();
				crate::json_ser::serialize_structure_crate_model_upload_prepare_file(
					&mut object_12,
					item_11,
				)?;
				object_12.finish();
			}
		}
		array_10.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_namespace_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameNamespaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_13) = &input.display_name {
		object.key("display_name").string(var_13.as_str());
	}
	if let Some(var_14) = &input.name_id {
		object.key("name_id").string(var_14.as_str());
	}
	if let Some(var_15) = &input.version_id {
		object.key("version_id").string(var_15.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_namespace_token_development_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameNamespaceTokenDevelopmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_16) = &input.hostname {
		object.key("hostname").string(var_16.as_str());
	}
	if let Some(var_17) = &input.lobby_ports {
		let mut array_18 = object.key("lobby_ports").start_array();
		for item_19 in var_17 {
			{
				let mut object_20 = array_18.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_port(
					&mut object_20,
					item_19,
				)?;
				object_20.finish();
			}
		}
		array_18.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_version_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_21) = &input.config {
		let mut object_22 = object.key("config").start_object();
		crate::json_ser::serialize_structure_crate_model_cloud_version_config(
			&mut object_22,
			var_21,
		)?;
		object_22.finish();
	}
	if let Some(var_23) = &input.display_name {
		object.key("display_name").string(var_23.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_export_matchmaker_lobby_history_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ExportMatchmakerLobbyHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_24) = &input.query_end {
		object.key("query_end").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_24).into()),
		);
	}
	if let Some(var_25) = &input.query_start {
		object.key("query_start").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_25).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_game_banner_upload_prepare_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::GameBannerUploadPrepareInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_26) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_26).into()),
		);
	}
	if let Some(var_27) = &input.mime {
		object.key("mime").string(var_27.as_str());
	}
	if let Some(var_28) = &input.path {
		object.key("path").string(var_28.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_game_logo_upload_prepare_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::GameLogoUploadPrepareInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_29) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_29).into()),
		);
	}
	if let Some(var_30) = &input.mime {
		object.key("mime").string(var_30.as_str());
	}
	if let Some(var_31) = &input.path {
		object.key("path").string(var_31.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_group_billing_checkout_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::GroupBillingCheckoutInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_32) = &input.amount {
		object.key("amount").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_32).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_toggle_namespace_domain_public_auth_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ToggleNamespaceDomainPublicAuthInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_33) = &input.enabled {
		object.key("enabled").boolean(*var_33);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_game_namespace_matchmaker_config_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateGameNamespaceMatchmakerConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_34) = &input.lobby_count_max {
		object.key("lobby_count_max").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_34).into()),
		);
	}
	if let Some(var_35) = &input.max_players {
		object.key("max_players").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_35).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_game_namespace_version_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateGameNamespaceVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_36) = &input.version_id {
		object.key("version_id").string(var_36.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_37) = &input.display_name {
		object.key("display_name").string(var_37.as_str());
	}
	if let Some(var_38) = &input.name_id {
		object.key("name_id").string(var_38.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_namespace_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameNamespaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_39) = &input.display_name {
		object.key("display_name").string(var_39.as_str());
	}
	if let Some(var_40) = &input.name_id {
		object.key("name_id").string(var_40.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_namespace_matchmaker_config_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameNamespaceMatchmakerConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_41) = &input.lobby_count_max {
		object.key("lobby_count_max").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_41).into()),
		);
	}
	if let Some(var_42) = &input.max_players {
		object.key("max_players").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_42).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_namespace_token_development_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameNamespaceTokenDevelopmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_43) = &input.hostname {
		object.key("hostname").string(var_43.as_str());
	}
	if let Some(var_44) = &input.lobby_ports {
		let mut array_45 = object.key("lobby_ports").start_array();
		for item_46 in var_44 {
			{
				let mut object_47 = array_45.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_port(
					&mut object_47,
					item_46,
				)?;
				object_47.finish();
			}
		}
		array_45.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_version_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_48) = &input.config {
		let mut object_49 = object.key("config").start_object();
		crate::json_ser::serialize_structure_crate_model_cloud_version_config(
			&mut object_49,
			var_48,
		)?;
		object_49.finish();
	}
	if let Some(var_50) = &input.display_name {
		object.key("display_name").string(var_50.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_group_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGroupInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_51) = &input.display_name {
		object.key("display_name").string(var_51.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_upload_prepare_file(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::UploadPrepareFile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_52) = &input.path {
		object.key("path").string(var_52.as_str());
	}
	if let Some(var_53) = &input.content_type {
		object.key("content_type").string(var_53.as_str());
	}
	if let Some(var_54) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_54).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_runtime_docker_port(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntimeDockerPort,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_55) = &input.label {
		object.key("label").string(var_55.as_str());
	}
	if let Some(var_56) = &input.target_port {
		object.key("target_port").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_56).into()),
		);
	}
	if let Some(var_57) = &input.proxy_protocol {
		object.key("proxy_protocol").string(var_57.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cloud_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CloudVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_58) = &input.cdn {
		let mut object_59 = object.key("cdn").start_object();
		crate::json_ser::serialize_structure_crate_model_cdn_version_config(
			&mut object_59,
			var_58,
		)?;
		object_59.finish();
	}
	if let Some(var_60) = &input.matchmaker {
		let mut object_61 = object.key("matchmaker").start_object();
		crate::json_ser::serialize_structure_crate_model_matchmaker_version_config(
			&mut object_61,
			var_60,
		)?;
		object_61.finish();
	}
	if let Some(var_62) = &input.kv {
		let mut object_63 = object.key("kv").start_object();
		crate::json_ser::serialize_structure_crate_model_kv_version_config(&mut object_63, var_62)?;
		object_63.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cdn_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CdnVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_64) = &input.site_id {
		object.key("site_id").string(var_64.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_matchmaker_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::MatchmakerVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_65) = &input.lobby_groups {
		let mut array_66 = object.key("lobby_groups").start_array();
		for item_67 in var_65 {
			{
				let mut object_68 = array_66.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group(
					&mut object_68,
					item_67,
				)?;
				object_68.finish();
			}
		}
		array_66.finish();
	}
	if let Some(var_69) = &input.captcha {
		let mut object_70 = object.key("captcha").start_object();
		crate::json_ser::serialize_structure_crate_model_matchmaker_captcha(
			&mut object_70,
			var_69,
		)?;
		object_70.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_kv_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::KvVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	let (_, _) = (object, input);
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_71) = &input.name_id {
		object.key("name_id").string(var_71.as_str());
	}
	if let Some(var_72) = &input.regions {
		let mut array_73 = object.key("regions").start_array();
		for item_74 in var_72 {
			{
				let mut object_75 = array_73.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_region(
					&mut object_75,
					item_74,
				)?;
				object_75.finish();
			}
		}
		array_73.finish();
	}
	if let Some(var_76) = &input.max_players_normal {
		object.key("max_players_normal").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_76).into()),
		);
	}
	if let Some(var_77) = &input.max_players_direct {
		object.key("max_players_direct").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_77).into()),
		);
	}
	if let Some(var_78) = &input.max_players_party {
		object.key("max_players_party").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_78).into()),
		);
	}
	if let Some(var_79) = &input.runtime {
		let mut object_80 = object.key("runtime").start_object();
		crate::json_ser::serialize_union_crate_model_lobby_group_runtime(&mut object_80, var_79)?;
		object_80.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_matchmaker_captcha(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::MatchmakerCaptcha,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_81) = &input.hcaptcha {
		let mut object_82 = object.key("hcaptcha").start_object();
		crate::json_ser::serialize_structure_crate_model_matchmaker_captcha_hcaptcha(
			&mut object_82,
			var_81,
		)?;
		object_82.finish();
	}
	if let Some(var_83) = &input.requests_before_reverify {
		object.key("requests_before_reverify").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_83).into()),
		);
	}
	if let Some(var_84) = &input.verification_ttl {
		object.key("verification_ttl").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_84).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_region(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_85) = &input.region_id {
		object.key("region_id").string(var_85.as_str());
	}
	if let Some(var_86) = &input.tier_name_id {
		object.key("tier_name_id").string(var_86.as_str());
	}
	if let Some(var_87) = &input.idle_lobbies {
		let mut object_88 = object.key("idle_lobbies").start_object();
		crate::json_ser::serialize_structure_crate_model_idle_lobbies_config(
			&mut object_88,
			var_87,
		)?;
		object_88.finish();
	}
	Ok(())
}

pub fn serialize_union_crate_model_lobby_group_runtime(
	object_80: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntime,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	match input {
		crate::model::LobbyGroupRuntime::Docker(inner) => {
			let mut object_89 = object_80.key("docker").start_object();
			crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker(
				&mut object_89,
				inner,
			)?;
			object_89.finish();
		}
		crate::model::LobbyGroupRuntime::Unknown => {
			return Err(
				aws_smithy_http::operation::SerializationError::unknown_variant(
					"LobbyGroupRuntime",
				),
			)
		}
	}
	Ok(())
}

pub fn serialize_structure_crate_model_matchmaker_captcha_hcaptcha(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::MatchmakerCaptchaHcaptcha,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_90) = &input.level {
		object.key("level").string(var_90.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_idle_lobbies_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::IdleLobbiesConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_91) = &input.min_idle_lobbies {
		object.key("min_idle_lobbies").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_91).into()),
		);
	}
	if let Some(var_92) = &input.max_idle_lobbies {
		object.key("max_idle_lobbies").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_92).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_runtime_docker(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntimeDocker,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_93) = &input.build_id {
		object.key("build_id").string(var_93.as_str());
	}
	if let Some(var_94) = &input.args {
		let mut array_95 = object.key("args").start_array();
		for item_96 in var_94 {
			{
				array_95.value().string(item_96.as_str());
			}
		}
		array_95.finish();
	}
	if let Some(var_97) = &input.ports {
		let mut array_98 = object.key("ports").start_array();
		for item_99 in var_97 {
			{
				let mut object_100 = array_98.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_port(
					&mut object_100,
					item_99,
				)?;
				object_100.finish();
			}
		}
		array_98.finish();
	}
	if let Some(var_101) = &input.env_vars {
		let mut array_102 = object.key("env_vars").start_array();
		for item_103 in var_101 {
			{
				let mut object_104 = array_102.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_env_var(&mut object_104, item_103)?;
				object_104.finish();
			}
		}
		array_102.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_runtime_docker_env_var(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntimeDockerEnvVar,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_105) = &input.key {
		object.key("key").string(var_105.as_str());
	}
	if let Some(var_106) = &input.value {
		object.key("value").string(var_106.as_str());
	}
	Ok(())
}
