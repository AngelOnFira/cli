// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRayPerfLogsOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub perf_lists: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
}
impl GetRayPerfLogsOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn perf_lists(&self) -> std::option::Option<&[crate::model::SvcPerf]> {
		self.perf_lists.as_deref()
	}
}
impl std::fmt::Debug for GetRayPerfLogsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetRayPerfLogsOutput");
		formatter.field("perf_lists", &self.perf_lists);
		formatter.finish()
	}
}
/// See [`GetRayPerfLogsOutput`](crate::output::GetRayPerfLogsOutput)
pub mod get_ray_perf_logs_output {
	/// A builder for [`GetRayPerfLogsOutput`](crate::output::GetRayPerfLogsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) perf_lists: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
	}
	impl Builder {
		/// Appends an item to `perf_lists`.
		///
		/// To override the contents of this collection use [`set_perf_lists`](Self::set_perf_lists).
		///
		pub fn perf_lists(mut self, input: crate::model::SvcPerf) -> Self {
			let mut v = self.perf_lists.unwrap_or_default();
			v.push(input);
			self.perf_lists = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_perf_lists(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
		) -> Self {
			self.perf_lists = input;
			self
		}
		/// Consumes the builder and constructs a [`GetRayPerfLogsOutput`](crate::output::GetRayPerfLogsOutput)
		pub fn build(self) -> crate::output::GetRayPerfLogsOutput {
			crate::output::GetRayPerfLogsOutput {
				perf_lists: self.perf_lists,
			}
		}
	}
}
impl GetRayPerfLogsOutput {
	/// Creates a new builder-style object to manufacture [`GetRayPerfLogsOutput`](crate::output::GetRayPerfLogsOutput)
	pub fn builder() -> crate::output::get_ray_perf_logs_output::Builder {
		crate::output::get_ray_perf_logs_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateTeamOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateTeamOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateTeamOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateTeamOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateTeamOutput`](crate::output::ValidateTeamOutput)
pub mod validate_team_output {
	/// A builder for [`ValidateTeamOutput`](crate::output::ValidateTeamOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateTeamOutput`](crate::output::ValidateTeamOutput)
		pub fn build(self) -> crate::output::ValidateTeamOutput {
			crate::output::ValidateTeamOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateTeamOutput {
	/// Creates a new builder-style object to manufacture [`ValidateTeamOutput`](crate::output::ValidateTeamOutput)
	pub fn builder() -> crate::output::validate_team_output::Builder {
		crate::output::validate_team_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct TeamBillingCheckoutOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub url: std::option::Option<std::string::String>,
}
impl TeamBillingCheckoutOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for TeamBillingCheckoutOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("TeamBillingCheckoutOutput");
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`TeamBillingCheckoutOutput`](crate::output::TeamBillingCheckoutOutput)
pub mod team_billing_checkout_output {
	/// A builder for [`TeamBillingCheckoutOutput`](crate::output::TeamBillingCheckoutOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`TeamBillingCheckoutOutput`](crate::output::TeamBillingCheckoutOutput)
		pub fn build(self) -> crate::output::TeamBillingCheckoutOutput {
			crate::output::TeamBillingCheckoutOutput { url: self.url }
		}
	}
}
impl TeamBillingCheckoutOutput {
	/// Creates a new builder-style object to manufacture [`TeamBillingCheckoutOutput`](crate::output::TeamBillingCheckoutOutput)
	pub fn builder() -> crate::output::team_billing_checkout_output::Builder {
		crate::output::team_billing_checkout_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ConvertTeamOutput {}
impl std::fmt::Debug for ConvertTeamOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ConvertTeamOutput");
		formatter.finish()
	}
}
/// See [`ConvertTeamOutput`](crate::output::ConvertTeamOutput)
pub mod convert_team_output {
	/// A builder for [`ConvertTeamOutput`](crate::output::ConvertTeamOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`ConvertTeamOutput`](crate::output::ConvertTeamOutput)
		pub fn build(self) -> crate::output::ConvertTeamOutput {
			crate::output::ConvertTeamOutput {}
		}
	}
}
impl ConvertTeamOutput {
	/// Creates a new builder-style object to manufacture [`ConvertTeamOutput`](crate::output::ConvertTeamOutput)
	pub fn builder() -> crate::output::convert_team_output::Builder {
		crate::output::convert_team_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTeamTransfersListOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub transfers: std::option::Option<std::vec::Vec<crate::model::TeamBillingTransfer>>,
	#[allow(missing_docs)] // documentation missing in model
	pub end_transfer_id: std::option::Option<std::string::String>,
}
impl GetTeamTransfersListOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn transfers(&self) -> std::option::Option<&[crate::model::TeamBillingTransfer]> {
		self.transfers.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn end_transfer_id(&self) -> std::option::Option<&str> {
		self.end_transfer_id.as_deref()
	}
}
impl std::fmt::Debug for GetTeamTransfersListOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetTeamTransfersListOutput");
		formatter.field("transfers", &self.transfers);
		formatter.field("end_transfer_id", &self.end_transfer_id);
		formatter.finish()
	}
}
/// See [`GetTeamTransfersListOutput`](crate::output::GetTeamTransfersListOutput)
pub mod get_team_transfers_list_output {
	/// A builder for [`GetTeamTransfersListOutput`](crate::output::GetTeamTransfersListOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) transfers: std::option::Option<std::vec::Vec<crate::model::TeamBillingTransfer>>,
		pub(crate) end_transfer_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Appends an item to `transfers`.
		///
		/// To override the contents of this collection use [`set_transfers`](Self::set_transfers).
		///
		pub fn transfers(mut self, input: crate::model::TeamBillingTransfer) -> Self {
			let mut v = self.transfers.unwrap_or_default();
			v.push(input);
			self.transfers = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_transfers(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::TeamBillingTransfer>>,
		) -> Self {
			self.transfers = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn end_transfer_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.end_transfer_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_end_transfer_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.end_transfer_id = input;
			self
		}
		/// Consumes the builder and constructs a [`GetTeamTransfersListOutput`](crate::output::GetTeamTransfersListOutput)
		pub fn build(self) -> crate::output::GetTeamTransfersListOutput {
			crate::output::GetTeamTransfersListOutput {
				transfers: self.transfers,
				end_transfer_id: self.end_transfer_id,
			}
		}
	}
}
impl GetTeamTransfersListOutput {
	/// Creates a new builder-style object to manufacture [`GetTeamTransfersListOutput`](crate::output::GetTeamTransfersListOutput)
	pub fn builder() -> crate::output::get_team_transfers_list_output::Builder {
		crate::output::get_team_transfers_list_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTeamPaymentsListOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub payments: std::option::Option<std::vec::Vec<crate::model::TeamBillingPayment>>,
	#[allow(missing_docs)] // documentation missing in model
	pub end_payment_id: std::option::Option<std::string::String>,
}
impl GetTeamPaymentsListOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn payments(&self) -> std::option::Option<&[crate::model::TeamBillingPayment]> {
		self.payments.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn end_payment_id(&self) -> std::option::Option<&str> {
		self.end_payment_id.as_deref()
	}
}
impl std::fmt::Debug for GetTeamPaymentsListOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetTeamPaymentsListOutput");
		formatter.field("payments", &self.payments);
		formatter.field("end_payment_id", &self.end_payment_id);
		formatter.finish()
	}
}
/// See [`GetTeamPaymentsListOutput`](crate::output::GetTeamPaymentsListOutput)
pub mod get_team_payments_list_output {
	/// A builder for [`GetTeamPaymentsListOutput`](crate::output::GetTeamPaymentsListOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) payments: std::option::Option<std::vec::Vec<crate::model::TeamBillingPayment>>,
		pub(crate) end_payment_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		/// Appends an item to `payments`.
		///
		/// To override the contents of this collection use [`set_payments`](Self::set_payments).
		///
		pub fn payments(mut self, input: crate::model::TeamBillingPayment) -> Self {
			let mut v = self.payments.unwrap_or_default();
			v.push(input);
			self.payments = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_payments(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::TeamBillingPayment>>,
		) -> Self {
			self.payments = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn end_payment_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.end_payment_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_end_payment_id(
			mut self,
			input: std::option::Option<std::string::String>,
		) -> Self {
			self.end_payment_id = input;
			self
		}
		/// Consumes the builder and constructs a [`GetTeamPaymentsListOutput`](crate::output::GetTeamPaymentsListOutput)
		pub fn build(self) -> crate::output::GetTeamPaymentsListOutput {
			crate::output::GetTeamPaymentsListOutput {
				payments: self.payments,
				end_payment_id: self.end_payment_id,
			}
		}
	}
}
impl GetTeamPaymentsListOutput {
	/// Creates a new builder-style object to manufacture [`GetTeamPaymentsListOutput`](crate::output::GetTeamPaymentsListOutput)
	pub fn builder() -> crate::output::get_team_payments_list_output::Builder {
		crate::output::get_team_payments_list_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetTeamBillingOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub billing: std::option::Option<crate::model::TeamBillingSummary>,
	#[allow(missing_docs)] // documentation missing in model
	pub bank_source: std::option::Option<crate::model::TeamBankSource>,
	#[allow(missing_docs)] // documentation missing in model
	pub available_regions: std::option::Option<std::vec::Vec<crate::model::RegionSummary>>,
}
impl GetTeamBillingOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn billing(&self) -> std::option::Option<&crate::model::TeamBillingSummary> {
		self.billing.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn bank_source(&self) -> std::option::Option<&crate::model::TeamBankSource> {
		self.bank_source.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn available_regions(&self) -> std::option::Option<&[crate::model::RegionSummary]> {
		self.available_regions.as_deref()
	}
}
impl std::fmt::Debug for GetTeamBillingOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetTeamBillingOutput");
		formatter.field("billing", &self.billing);
		formatter.field("bank_source", &self.bank_source);
		formatter.field("available_regions", &self.available_regions);
		formatter.finish()
	}
}
/// See [`GetTeamBillingOutput`](crate::output::GetTeamBillingOutput)
pub mod get_team_billing_output {
	/// A builder for [`GetTeamBillingOutput`](crate::output::GetTeamBillingOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) billing: std::option::Option<crate::model::TeamBillingSummary>,
		pub(crate) bank_source: std::option::Option<crate::model::TeamBankSource>,
		pub(crate) available_regions:
			std::option::Option<std::vec::Vec<crate::model::RegionSummary>>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn billing(mut self, input: crate::model::TeamBillingSummary) -> Self {
			self.billing = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_billing(
			mut self,
			input: std::option::Option<crate::model::TeamBillingSummary>,
		) -> Self {
			self.billing = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn bank_source(mut self, input: crate::model::TeamBankSource) -> Self {
			self.bank_source = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_bank_source(
			mut self,
			input: std::option::Option<crate::model::TeamBankSource>,
		) -> Self {
			self.bank_source = input;
			self
		}
		/// Appends an item to `available_regions`.
		///
		/// To override the contents of this collection use [`set_available_regions`](Self::set_available_regions).
		///
		pub fn available_regions(mut self, input: crate::model::RegionSummary) -> Self {
			let mut v = self.available_regions.unwrap_or_default();
			v.push(input);
			self.available_regions = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_available_regions(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::RegionSummary>>,
		) -> Self {
			self.available_regions = input;
			self
		}
		/// Consumes the builder and constructs a [`GetTeamBillingOutput`](crate::output::GetTeamBillingOutput)
		pub fn build(self) -> crate::output::GetTeamBillingOutput {
			crate::output::GetTeamBillingOutput {
				billing: self.billing,
				bank_source: self.bank_source,
				available_regions: self.available_regions,
			}
		}
	}
}
impl GetTeamBillingOutput {
	/// Creates a new builder-style object to manufacture [`GetTeamBillingOutput`](crate::output::GetTeamBillingOutput)
	pub fn builder() -> crate::output::get_team_billing_output::Builder {
		crate::output::get_team_billing_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetRegionTiersOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub tiers: std::option::Option<std::vec::Vec<crate::model::RegionTier>>,
}
impl GetRegionTiersOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn tiers(&self) -> std::option::Option<&[crate::model::RegionTier]> {
		self.tiers.as_deref()
	}
}
impl std::fmt::Debug for GetRegionTiersOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetRegionTiersOutput");
		formatter.field("tiers", &self.tiers);
		formatter.finish()
	}
}
/// See [`GetRegionTiersOutput`](crate::output::GetRegionTiersOutput)
pub mod get_region_tiers_output {
	/// A builder for [`GetRegionTiersOutput`](crate::output::GetRegionTiersOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) tiers: std::option::Option<std::vec::Vec<crate::model::RegionTier>>,
	}
	impl Builder {
		/// Appends an item to `tiers`.
		///
		/// To override the contents of this collection use [`set_tiers`](Self::set_tiers).
		///
		pub fn tiers(mut self, input: crate::model::RegionTier) -> Self {
			let mut v = self.tiers.unwrap_or_default();
			v.push(input);
			self.tiers = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_tiers(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::RegionTier>>,
		) -> Self {
			self.tiers = input;
			self
		}
		/// Consumes the builder and constructs a [`GetRegionTiersOutput`](crate::output::GetRegionTiersOutput)
		pub fn build(self) -> crate::output::GetRegionTiersOutput {
			crate::output::GetRegionTiersOutput { tiers: self.tiers }
		}
	}
}
impl GetRegionTiersOutput {
	/// Creates a new builder-style object to manufacture [`GetRegionTiersOutput`](crate::output::GetRegionTiersOutput)
	pub fn builder() -> crate::output::get_region_tiers_output::Builder {
		crate::output::get_region_tiers_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ExportMatchmakerLobbyHistoryOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub url: std::option::Option<std::string::String>,
}
impl ExportMatchmakerLobbyHistoryOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn url(&self) -> std::option::Option<&str> {
		self.url.as_deref()
	}
}
impl std::fmt::Debug for ExportMatchmakerLobbyHistoryOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ExportMatchmakerLobbyHistoryOutput");
		formatter.field("url", &self.url);
		formatter.finish()
	}
}
/// See [`ExportMatchmakerLobbyHistoryOutput`](crate::output::ExportMatchmakerLobbyHistoryOutput)
pub mod export_matchmaker_lobby_history_output {
	/// A builder for [`ExportMatchmakerLobbyHistoryOutput`](crate::output::ExportMatchmakerLobbyHistoryOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) url: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn url(mut self, input: impl Into<std::string::String>) -> Self {
			self.url = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_url(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.url = input;
			self
		}
		/// Consumes the builder and constructs a [`ExportMatchmakerLobbyHistoryOutput`](crate::output::ExportMatchmakerLobbyHistoryOutput)
		pub fn build(self) -> crate::output::ExportMatchmakerLobbyHistoryOutput {
			crate::output::ExportMatchmakerLobbyHistoryOutput { url: self.url }
		}
	}
}
impl ExportMatchmakerLobbyHistoryOutput {
	/// Creates a new builder-style object to manufacture [`ExportMatchmakerLobbyHistoryOutput`](crate::output::ExportMatchmakerLobbyHistoryOutput)
	pub fn builder() -> crate::output::export_matchmaker_lobby_history_output::Builder {
		crate::output::export_matchmaker_lobby_history_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct DeleteMatchmakerLobbyOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub did_remove: std::option::Option<bool>,
}
impl DeleteMatchmakerLobbyOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn did_remove(&self) -> std::option::Option<bool> {
		self.did_remove
	}
}
impl std::fmt::Debug for DeleteMatchmakerLobbyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("DeleteMatchmakerLobbyOutput");
		formatter.field("did_remove", &self.did_remove);
		formatter.finish()
	}
}
/// See [`DeleteMatchmakerLobbyOutput`](crate::output::DeleteMatchmakerLobbyOutput)
pub mod delete_matchmaker_lobby_output {
	/// A builder for [`DeleteMatchmakerLobbyOutput`](crate::output::DeleteMatchmakerLobbyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) did_remove: std::option::Option<bool>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn did_remove(mut self, input: bool) -> Self {
			self.did_remove = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_did_remove(mut self, input: std::option::Option<bool>) -> Self {
			self.did_remove = input;
			self
		}
		/// Consumes the builder and constructs a [`DeleteMatchmakerLobbyOutput`](crate::output::DeleteMatchmakerLobbyOutput)
		pub fn build(self) -> crate::output::DeleteMatchmakerLobbyOutput {
			crate::output::DeleteMatchmakerLobbyOutput {
				did_remove: self.did_remove,
			}
		}
	}
}
impl DeleteMatchmakerLobbyOutput {
	/// Creates a new builder-style object to manufacture [`DeleteMatchmakerLobbyOutput`](crate::output::DeleteMatchmakerLobbyOutput)
	pub fn builder() -> crate::output::delete_matchmaker_lobby_output::Builder {
		crate::output::delete_matchmaker_lobby_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameCdnSiteOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub site_id: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub upload_id: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub presigned_requests:
		std::option::Option<std::vec::Vec<crate::model::UploadPresignedRequest>>,
}
impl CreateGameCdnSiteOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn site_id(&self) -> std::option::Option<&str> {
		self.site_id.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn presigned_requests(
		&self,
	) -> std::option::Option<&[crate::model::UploadPresignedRequest]> {
		self.presigned_requests.as_deref()
	}
}
impl std::fmt::Debug for CreateGameCdnSiteOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameCdnSiteOutput");
		formatter.field("site_id", &self.site_id);
		formatter.field("upload_id", &self.upload_id);
		formatter.field("presigned_requests", &self.presigned_requests);
		formatter.finish()
	}
}
/// See [`CreateGameCdnSiteOutput`](crate::output::CreateGameCdnSiteOutput)
pub mod create_game_cdn_site_output {
	/// A builder for [`CreateGameCdnSiteOutput`](crate::output::CreateGameCdnSiteOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) site_id: std::option::Option<std::string::String>,
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) presigned_requests:
			std::option::Option<std::vec::Vec<crate::model::UploadPresignedRequest>>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn site_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.site_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_site_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.site_id = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		/// Appends an item to `presigned_requests`.
		///
		/// To override the contents of this collection use [`set_presigned_requests`](Self::set_presigned_requests).
		///
		pub fn presigned_requests(mut self, input: crate::model::UploadPresignedRequest) -> Self {
			let mut v = self.presigned_requests.unwrap_or_default();
			v.push(input);
			self.presigned_requests = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_presigned_requests(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::UploadPresignedRequest>>,
		) -> Self {
			self.presigned_requests = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameCdnSiteOutput`](crate::output::CreateGameCdnSiteOutput)
		pub fn build(self) -> crate::output::CreateGameCdnSiteOutput {
			crate::output::CreateGameCdnSiteOutput {
				site_id: self.site_id,
				upload_id: self.upload_id,
				presigned_requests: self.presigned_requests,
			}
		}
	}
}
impl CreateGameCdnSiteOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameCdnSiteOutput`](crate::output::CreateGameCdnSiteOutput)
	pub fn builder() -> crate::output::create_game_cdn_site_output::Builder {
		crate::output::create_game_cdn_site_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGameCdnSitesOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub sites: std::option::Option<std::vec::Vec<crate::model::CdnSiteSummary>>,
}
impl ListGameCdnSitesOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn sites(&self) -> std::option::Option<&[crate::model::CdnSiteSummary]> {
		self.sites.as_deref()
	}
}
impl std::fmt::Debug for ListGameCdnSitesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListGameCdnSitesOutput");
		formatter.field("sites", &self.sites);
		formatter.finish()
	}
}
/// See [`ListGameCdnSitesOutput`](crate::output::ListGameCdnSitesOutput)
pub mod list_game_cdn_sites_output {
	/// A builder for [`ListGameCdnSitesOutput`](crate::output::ListGameCdnSitesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) sites: std::option::Option<std::vec::Vec<crate::model::CdnSiteSummary>>,
	}
	impl Builder {
		/// Appends an item to `sites`.
		///
		/// To override the contents of this collection use [`set_sites`](Self::set_sites).
		///
		pub fn sites(mut self, input: crate::model::CdnSiteSummary) -> Self {
			let mut v = self.sites.unwrap_or_default();
			v.push(input);
			self.sites = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_sites(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::CdnSiteSummary>>,
		) -> Self {
			self.sites = input;
			self
		}
		/// Consumes the builder and constructs a [`ListGameCdnSitesOutput`](crate::output::ListGameCdnSitesOutput)
		pub fn build(self) -> crate::output::ListGameCdnSitesOutput {
			crate::output::ListGameCdnSitesOutput { sites: self.sites }
		}
	}
}
impl ListGameCdnSitesOutput {
	/// Creates a new builder-style object to manufacture [`ListGameCdnSitesOutput`](crate::output::ListGameCdnSitesOutput)
	pub fn builder() -> crate::output::list_game_cdn_sites_output::Builder {
		crate::output::list_game_cdn_sites_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameBuildOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub build_id: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub upload_id: std::option::Option<std::string::String>,
	#[allow(missing_docs)] // documentation missing in model
	pub image_presigned_request: std::option::Option<crate::model::UploadPresignedRequest>,
}
impl CreateGameBuildOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn build_id(&self) -> std::option::Option<&str> {
		self.build_id.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn upload_id(&self) -> std::option::Option<&str> {
		self.upload_id.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn image_presigned_request(
		&self,
	) -> std::option::Option<&crate::model::UploadPresignedRequest> {
		self.image_presigned_request.as_ref()
	}
}
impl std::fmt::Debug for CreateGameBuildOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameBuildOutput");
		formatter.field("build_id", &self.build_id);
		formatter.field("upload_id", &self.upload_id);
		formatter.field("image_presigned_request", &self.image_presigned_request);
		formatter.finish()
	}
}
/// See [`CreateGameBuildOutput`](crate::output::CreateGameBuildOutput)
pub mod create_game_build_output {
	/// A builder for [`CreateGameBuildOutput`](crate::output::CreateGameBuildOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) build_id: std::option::Option<std::string::String>,
		pub(crate) upload_id: std::option::Option<std::string::String>,
		pub(crate) image_presigned_request:
			std::option::Option<crate::model::UploadPresignedRequest>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn build_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.build_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_build_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.build_id = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn upload_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.upload_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_upload_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.upload_id = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn image_presigned_request(
			mut self,
			input: crate::model::UploadPresignedRequest,
		) -> Self {
			self.image_presigned_request = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_image_presigned_request(
			mut self,
			input: std::option::Option<crate::model::UploadPresignedRequest>,
		) -> Self {
			self.image_presigned_request = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameBuildOutput`](crate::output::CreateGameBuildOutput)
		pub fn build(self) -> crate::output::CreateGameBuildOutput {
			crate::output::CreateGameBuildOutput {
				build_id: self.build_id,
				upload_id: self.upload_id,
				image_presigned_request: self.image_presigned_request,
			}
		}
	}
}
impl CreateGameBuildOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameBuildOutput`](crate::output::CreateGameBuildOutput)
	pub fn builder() -> crate::output::create_game_build_output::Builder {
		crate::output::create_game_build_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListGameBuildsOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub builds: std::option::Option<std::vec::Vec<crate::model::BuildSummary>>,
}
impl ListGameBuildsOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn builds(&self) -> std::option::Option<&[crate::model::BuildSummary]> {
		self.builds.as_deref()
	}
}
impl std::fmt::Debug for ListGameBuildsOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListGameBuildsOutput");
		formatter.field("builds", &self.builds);
		formatter.finish()
	}
}
/// See [`ListGameBuildsOutput`](crate::output::ListGameBuildsOutput)
pub mod list_game_builds_output {
	/// A builder for [`ListGameBuildsOutput`](crate::output::ListGameBuildsOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) builds: std::option::Option<std::vec::Vec<crate::model::BuildSummary>>,
	}
	impl Builder {
		/// Appends an item to `builds`.
		///
		/// To override the contents of this collection use [`set_builds`](Self::set_builds).
		///
		pub fn builds(mut self, input: crate::model::BuildSummary) -> Self {
			let mut v = self.builds.unwrap_or_default();
			v.push(input);
			self.builds = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_builds(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::BuildSummary>>,
		) -> Self {
			self.builds = input;
			self
		}
		/// Consumes the builder and constructs a [`ListGameBuildsOutput`](crate::output::ListGameBuildsOutput)
		pub fn build(self) -> crate::output::ListGameBuildsOutput {
			crate::output::ListGameBuildsOutput {
				builds: self.builds,
			}
		}
	}
}
impl ListGameBuildsOutput {
	/// Creates a new builder-style object to manufacture [`ListGameBuildsOutput`](crate::output::ListGameBuildsOutput)
	pub fn builder() -> crate::output::list_game_builds_output::Builder {
		crate::output::list_game_builds_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateCloudTokenOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub token: std::option::Option<std::string::String>,
}
impl CreateCloudTokenOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn token(&self) -> std::option::Option<&str> {
		self.token.as_deref()
	}
}
impl std::fmt::Debug for CreateCloudTokenOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateCloudTokenOutput");
		formatter.field("token", &self.token);
		formatter.finish()
	}
}
/// See [`CreateCloudTokenOutput`](crate::output::CreateCloudTokenOutput)
pub mod create_cloud_token_output {
	/// A builder for [`CreateCloudTokenOutput`](crate::output::CreateCloudTokenOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) token: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
			self.token = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.token = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateCloudTokenOutput`](crate::output::CreateCloudTokenOutput)
		pub fn build(self) -> crate::output::CreateCloudTokenOutput {
			crate::output::CreateCloudTokenOutput { token: self.token }
		}
	}
}
impl CreateCloudTokenOutput {
	/// Creates a new builder-style object to manufacture [`CreateCloudTokenOutput`](crate::output::CreateCloudTokenOutput)
	pub fn builder() -> crate::output::create_cloud_token_output::Builder {
		crate::output::create_cloud_token_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNamespaceLobbyOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub lobby: std::option::Option<crate::model::LogsLobbySummary>,
	#[allow(missing_docs)] // documentation missing in model
	pub stdout_presigned_urls: std::option::Option<std::vec::Vec<std::string::String>>,
	#[allow(missing_docs)] // documentation missing in model
	pub stderr_presigned_urls: std::option::Option<std::vec::Vec<std::string::String>>,
	#[allow(missing_docs)] // documentation missing in model
	pub perf_lists: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
	#[allow(missing_docs)] // documentation missing in model
	pub metrics: std::option::Option<crate::model::SvcMetrics>,
}
impl GetNamespaceLobbyOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn lobby(&self) -> std::option::Option<&crate::model::LogsLobbySummary> {
		self.lobby.as_ref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn stdout_presigned_urls(&self) -> std::option::Option<&[std::string::String]> {
		self.stdout_presigned_urls.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn stderr_presigned_urls(&self) -> std::option::Option<&[std::string::String]> {
		self.stderr_presigned_urls.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn perf_lists(&self) -> std::option::Option<&[crate::model::SvcPerf]> {
		self.perf_lists.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn metrics(&self) -> std::option::Option<&crate::model::SvcMetrics> {
		self.metrics.as_ref()
	}
}
impl std::fmt::Debug for GetNamespaceLobbyOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetNamespaceLobbyOutput");
		formatter.field("lobby", &self.lobby);
		formatter.field("stdout_presigned_urls", &self.stdout_presigned_urls);
		formatter.field("stderr_presigned_urls", &self.stderr_presigned_urls);
		formatter.field("perf_lists", &self.perf_lists);
		formatter.field("metrics", &self.metrics);
		formatter.finish()
	}
}
/// See [`GetNamespaceLobbyOutput`](crate::output::GetNamespaceLobbyOutput)
pub mod get_namespace_lobby_output {
	/// A builder for [`GetNamespaceLobbyOutput`](crate::output::GetNamespaceLobbyOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobby: std::option::Option<crate::model::LogsLobbySummary>,
		pub(crate) stdout_presigned_urls: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) stderr_presigned_urls: std::option::Option<std::vec::Vec<std::string::String>>,
		pub(crate) perf_lists: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
		pub(crate) metrics: std::option::Option<crate::model::SvcMetrics>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn lobby(mut self, input: crate::model::LogsLobbySummary) -> Self {
			self.lobby = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_lobby(
			mut self,
			input: std::option::Option<crate::model::LogsLobbySummary>,
		) -> Self {
			self.lobby = input;
			self
		}
		/// Appends an item to `stdout_presigned_urls`.
		///
		/// To override the contents of this collection use [`set_stdout_presigned_urls`](Self::set_stdout_presigned_urls).
		///
		pub fn stdout_presigned_urls(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.stdout_presigned_urls.unwrap_or_default();
			v.push(input.into());
			self.stdout_presigned_urls = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_stdout_presigned_urls(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.stdout_presigned_urls = input;
			self
		}
		/// Appends an item to `stderr_presigned_urls`.
		///
		/// To override the contents of this collection use [`set_stderr_presigned_urls`](Self::set_stderr_presigned_urls).
		///
		pub fn stderr_presigned_urls(mut self, input: impl Into<std::string::String>) -> Self {
			let mut v = self.stderr_presigned_urls.unwrap_or_default();
			v.push(input.into());
			self.stderr_presigned_urls = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_stderr_presigned_urls(
			mut self,
			input: std::option::Option<std::vec::Vec<std::string::String>>,
		) -> Self {
			self.stderr_presigned_urls = input;
			self
		}
		/// Appends an item to `perf_lists`.
		///
		/// To override the contents of this collection use [`set_perf_lists`](Self::set_perf_lists).
		///
		pub fn perf_lists(mut self, input: crate::model::SvcPerf) -> Self {
			let mut v = self.perf_lists.unwrap_or_default();
			v.push(input);
			self.perf_lists = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_perf_lists(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::SvcPerf>>,
		) -> Self {
			self.perf_lists = input;
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn metrics(mut self, input: crate::model::SvcMetrics) -> Self {
			self.metrics = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_metrics(mut self, input: std::option::Option<crate::model::SvcMetrics>) -> Self {
			self.metrics = input;
			self
		}
		/// Consumes the builder and constructs a [`GetNamespaceLobbyOutput`](crate::output::GetNamespaceLobbyOutput)
		pub fn build(self) -> crate::output::GetNamespaceLobbyOutput {
			crate::output::GetNamespaceLobbyOutput {
				lobby: self.lobby,
				stdout_presigned_urls: self.stdout_presigned_urls,
				stderr_presigned_urls: self.stderr_presigned_urls,
				perf_lists: self.perf_lists,
				metrics: self.metrics,
			}
		}
	}
}
impl GetNamespaceLobbyOutput {
	/// Creates a new builder-style object to manufacture [`GetNamespaceLobbyOutput`](crate::output::GetNamespaceLobbyOutput)
	pub fn builder() -> crate::output::get_namespace_lobby_output::Builder {
		crate::output::get_namespace_lobby_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ListNamespaceLobbiesOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub lobbies: std::option::Option<std::vec::Vec<crate::model::LogsLobbySummary>>,
}
impl ListNamespaceLobbiesOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn lobbies(&self) -> std::option::Option<&[crate::model::LogsLobbySummary]> {
		self.lobbies.as_deref()
	}
}
impl std::fmt::Debug for ListNamespaceLobbiesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ListNamespaceLobbiesOutput");
		formatter.field("lobbies", &self.lobbies);
		formatter.finish()
	}
}
/// See [`ListNamespaceLobbiesOutput`](crate::output::ListNamespaceLobbiesOutput)
pub mod list_namespace_lobbies_output {
	/// A builder for [`ListNamespaceLobbiesOutput`](crate::output::ListNamespaceLobbiesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobbies: std::option::Option<std::vec::Vec<crate::model::LogsLobbySummary>>,
	}
	impl Builder {
		/// Appends an item to `lobbies`.
		///
		/// To override the contents of this collection use [`set_lobbies`](Self::set_lobbies).
		///
		pub fn lobbies(mut self, input: crate::model::LogsLobbySummary) -> Self {
			let mut v = self.lobbies.unwrap_or_default();
			v.push(input);
			self.lobbies = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_lobbies(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::LogsLobbySummary>>,
		) -> Self {
			self.lobbies = input;
			self
		}
		/// Consumes the builder and constructs a [`ListNamespaceLobbiesOutput`](crate::output::ListNamespaceLobbiesOutput)
		pub fn build(self) -> crate::output::ListNamespaceLobbiesOutput {
			crate::output::ListNamespaceLobbiesOutput {
				lobbies: self.lobbies,
			}
		}
	}
}
impl ListNamespaceLobbiesOutput {
	/// Creates a new builder-style object to manufacture [`ListNamespaceLobbiesOutput`](crate::output::ListNamespaceLobbiesOutput)
	pub fn builder() -> crate::output::list_namespace_lobbies_output::Builder {
		crate::output::list_namespace_lobbies_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetNamespaceAnalyticsMatchmakerLiveOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub lobbies: std::option::Option<std::vec::Vec<crate::model::AnalyticsLobbySummary>>,
}
impl GetNamespaceAnalyticsMatchmakerLiveOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn lobbies(&self) -> std::option::Option<&[crate::model::AnalyticsLobbySummary]> {
		self.lobbies.as_deref()
	}
}
impl std::fmt::Debug for GetNamespaceAnalyticsMatchmakerLiveOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetNamespaceAnalyticsMatchmakerLiveOutput");
		formatter.field("lobbies", &self.lobbies);
		formatter.finish()
	}
}
/// See [`GetNamespaceAnalyticsMatchmakerLiveOutput`](crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput)
pub mod get_namespace_analytics_matchmaker_live_output {
	/// A builder for [`GetNamespaceAnalyticsMatchmakerLiveOutput`](crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) lobbies: std::option::Option<std::vec::Vec<crate::model::AnalyticsLobbySummary>>,
	}
	impl Builder {
		/// Appends an item to `lobbies`.
		///
		/// To override the contents of this collection use [`set_lobbies`](Self::set_lobbies).
		///
		pub fn lobbies(mut self, input: crate::model::AnalyticsLobbySummary) -> Self {
			let mut v = self.lobbies.unwrap_or_default();
			v.push(input);
			self.lobbies = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_lobbies(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::AnalyticsLobbySummary>>,
		) -> Self {
			self.lobbies = input;
			self
		}
		/// Consumes the builder and constructs a [`GetNamespaceAnalyticsMatchmakerLiveOutput`](crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput)
		pub fn build(self) -> crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput {
			crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput {
				lobbies: self.lobbies,
			}
		}
	}
}
impl GetNamespaceAnalyticsMatchmakerLiveOutput {
	/// Creates a new builder-style object to manufacture [`GetNamespaceAnalyticsMatchmakerLiveOutput`](crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput)
	pub fn builder() -> crate::output::get_namespace_analytics_matchmaker_live_output::Builder {
		crate::output::get_namespace_analytics_matchmaker_live_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameNamespaceMatchmakerConfigOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameNamespaceMatchmakerConfigOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameNamespaceMatchmakerConfigOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameNamespaceMatchmakerConfigOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameNamespaceMatchmakerConfigOutput`](crate::output::ValidateGameNamespaceMatchmakerConfigOutput)
pub mod validate_game_namespace_matchmaker_config_output {
	/// A builder for [`ValidateGameNamespaceMatchmakerConfigOutput`](crate::output::ValidateGameNamespaceMatchmakerConfigOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameNamespaceMatchmakerConfigOutput`](crate::output::ValidateGameNamespaceMatchmakerConfigOutput)
		pub fn build(self) -> crate::output::ValidateGameNamespaceMatchmakerConfigOutput {
			crate::output::ValidateGameNamespaceMatchmakerConfigOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameNamespaceMatchmakerConfigOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameNamespaceMatchmakerConfigOutput`](crate::output::ValidateGameNamespaceMatchmakerConfigOutput)
	pub fn builder() -> crate::output::validate_game_namespace_matchmaker_config_output::Builder {
		crate::output::validate_game_namespace_matchmaker_config_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameNamespaceTokenDevelopmentOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameNamespaceTokenDevelopmentOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameNamespaceTokenDevelopmentOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameNamespaceTokenDevelopmentOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameNamespaceTokenDevelopmentOutput`](crate::output::ValidateGameNamespaceTokenDevelopmentOutput)
pub mod validate_game_namespace_token_development_output {
	/// A builder for [`ValidateGameNamespaceTokenDevelopmentOutput`](crate::output::ValidateGameNamespaceTokenDevelopmentOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameNamespaceTokenDevelopmentOutput`](crate::output::ValidateGameNamespaceTokenDevelopmentOutput)
		pub fn build(self) -> crate::output::ValidateGameNamespaceTokenDevelopmentOutput {
			crate::output::ValidateGameNamespaceTokenDevelopmentOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameNamespaceTokenDevelopmentOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameNamespaceTokenDevelopmentOutput`](crate::output::ValidateGameNamespaceTokenDevelopmentOutput)
	pub fn builder() -> crate::output::validate_game_namespace_token_development_output::Builder {
		crate::output::validate_game_namespace_token_development_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameNamespaceOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameNamespaceOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameNamespaceOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameNamespaceOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameNamespaceOutput`](crate::output::ValidateGameNamespaceOutput)
pub mod validate_game_namespace_output {
	/// A builder for [`ValidateGameNamespaceOutput`](crate::output::ValidateGameNamespaceOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameNamespaceOutput`](crate::output::ValidateGameNamespaceOutput)
		pub fn build(self) -> crate::output::ValidateGameNamespaceOutput {
			crate::output::ValidateGameNamespaceOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameNamespaceOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameNamespaceOutput`](crate::output::ValidateGameNamespaceOutput)
	pub fn builder() -> crate::output::validate_game_namespace_output::Builder {
		crate::output::validate_game_namespace_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGameNamespaceMatchmakerConfigOutput {}
impl std::fmt::Debug for UpdateGameNamespaceMatchmakerConfigOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateGameNamespaceMatchmakerConfigOutput");
		formatter.finish()
	}
}
/// See [`UpdateGameNamespaceMatchmakerConfigOutput`](crate::output::UpdateGameNamespaceMatchmakerConfigOutput)
pub mod update_game_namespace_matchmaker_config_output {
	/// A builder for [`UpdateGameNamespaceMatchmakerConfigOutput`](crate::output::UpdateGameNamespaceMatchmakerConfigOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UpdateGameNamespaceMatchmakerConfigOutput`](crate::output::UpdateGameNamespaceMatchmakerConfigOutput)
		pub fn build(self) -> crate::output::UpdateGameNamespaceMatchmakerConfigOutput {
			crate::output::UpdateGameNamespaceMatchmakerConfigOutput {}
		}
	}
}
impl UpdateGameNamespaceMatchmakerConfigOutput {
	/// Creates a new builder-style object to manufacture [`UpdateGameNamespaceMatchmakerConfigOutput`](crate::output::UpdateGameNamespaceMatchmakerConfigOutput)
	pub fn builder() -> crate::output::update_game_namespace_matchmaker_config_output::Builder {
		crate::output::update_game_namespace_matchmaker_config_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ToggleNamespaceDomainPublicAuthOutput {}
impl std::fmt::Debug for ToggleNamespaceDomainPublicAuthOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ToggleNamespaceDomainPublicAuthOutput");
		formatter.finish()
	}
}
/// See [`ToggleNamespaceDomainPublicAuthOutput`](crate::output::ToggleNamespaceDomainPublicAuthOutput)
pub mod toggle_namespace_domain_public_auth_output {
	/// A builder for [`ToggleNamespaceDomainPublicAuthOutput`](crate::output::ToggleNamespaceDomainPublicAuthOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`ToggleNamespaceDomainPublicAuthOutput`](crate::output::ToggleNamespaceDomainPublicAuthOutput)
		pub fn build(self) -> crate::output::ToggleNamespaceDomainPublicAuthOutput {
			crate::output::ToggleNamespaceDomainPublicAuthOutput {}
		}
	}
}
impl ToggleNamespaceDomainPublicAuthOutput {
	/// Creates a new builder-style object to manufacture [`ToggleNamespaceDomainPublicAuthOutput`](crate::output::ToggleNamespaceDomainPublicAuthOutput)
	pub fn builder() -> crate::output::toggle_namespace_domain_public_auth_output::Builder {
		crate::output::toggle_namespace_domain_public_auth_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct RemoveNamespaceDomainOutput {}
impl std::fmt::Debug for RemoveNamespaceDomainOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("RemoveNamespaceDomainOutput");
		formatter.finish()
	}
}
/// See [`RemoveNamespaceDomainOutput`](crate::output::RemoveNamespaceDomainOutput)
pub mod remove_namespace_domain_output {
	/// A builder for [`RemoveNamespaceDomainOutput`](crate::output::RemoveNamespaceDomainOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`RemoveNamespaceDomainOutput`](crate::output::RemoveNamespaceDomainOutput)
		pub fn build(self) -> crate::output::RemoveNamespaceDomainOutput {
			crate::output::RemoveNamespaceDomainOutput {}
		}
	}
}
impl RemoveNamespaceDomainOutput {
	/// Creates a new builder-style object to manufacture [`RemoveNamespaceDomainOutput`](crate::output::RemoveNamespaceDomainOutput)
	pub fn builder() -> crate::output::remove_namespace_domain_output::Builder {
		crate::output::remove_namespace_domain_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateNamespaceDomainOutput {}
impl std::fmt::Debug for UpdateNamespaceDomainOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateNamespaceDomainOutput");
		formatter.finish()
	}
}
/// See [`UpdateNamespaceDomainOutput`](crate::output::UpdateNamespaceDomainOutput)
pub mod update_namespace_domain_output {
	/// A builder for [`UpdateNamespaceDomainOutput`](crate::output::UpdateNamespaceDomainOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UpdateNamespaceDomainOutput`](crate::output::UpdateNamespaceDomainOutput)
		pub fn build(self) -> crate::output::UpdateNamespaceDomainOutput {
			crate::output::UpdateNamespaceDomainOutput {}
		}
	}
}
impl UpdateNamespaceDomainOutput {
	/// Creates a new builder-style object to manufacture [`UpdateNamespaceDomainOutput`](crate::output::UpdateNamespaceDomainOutput)
	pub fn builder() -> crate::output::update_namespace_domain_output::Builder {
		crate::output::update_namespace_domain_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameNamespaceTokenDevelopmentOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub token: std::option::Option<std::string::String>,
}
impl CreateGameNamespaceTokenDevelopmentOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn token(&self) -> std::option::Option<&str> {
		self.token.as_deref()
	}
}
impl std::fmt::Debug for CreateGameNamespaceTokenDevelopmentOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameNamespaceTokenDevelopmentOutput");
		formatter.field("token", &self.token);
		formatter.finish()
	}
}
/// See [`CreateGameNamespaceTokenDevelopmentOutput`](crate::output::CreateGameNamespaceTokenDevelopmentOutput)
pub mod create_game_namespace_token_development_output {
	/// A builder for [`CreateGameNamespaceTokenDevelopmentOutput`](crate::output::CreateGameNamespaceTokenDevelopmentOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) token: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
			self.token = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.token = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameNamespaceTokenDevelopmentOutput`](crate::output::CreateGameNamespaceTokenDevelopmentOutput)
		pub fn build(self) -> crate::output::CreateGameNamespaceTokenDevelopmentOutput {
			crate::output::CreateGameNamespaceTokenDevelopmentOutput { token: self.token }
		}
	}
}
impl CreateGameNamespaceTokenDevelopmentOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameNamespaceTokenDevelopmentOutput`](crate::output::CreateGameNamespaceTokenDevelopmentOutput)
	pub fn builder() -> crate::output::create_game_namespace_token_development_output::Builder {
		crate::output::create_game_namespace_token_development_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameNamespaceTokenPublicOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub token: std::option::Option<std::string::String>,
}
impl CreateGameNamespaceTokenPublicOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn token(&self) -> std::option::Option<&str> {
		self.token.as_deref()
	}
}
impl std::fmt::Debug for CreateGameNamespaceTokenPublicOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameNamespaceTokenPublicOutput");
		formatter.field("token", &self.token);
		formatter.finish()
	}
}
/// See [`CreateGameNamespaceTokenPublicOutput`](crate::output::CreateGameNamespaceTokenPublicOutput)
pub mod create_game_namespace_token_public_output {
	/// A builder for [`CreateGameNamespaceTokenPublicOutput`](crate::output::CreateGameNamespaceTokenPublicOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) token: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn token(mut self, input: impl Into<std::string::String>) -> Self {
			self.token = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_token(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.token = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameNamespaceTokenPublicOutput`](crate::output::CreateGameNamespaceTokenPublicOutput)
		pub fn build(self) -> crate::output::CreateGameNamespaceTokenPublicOutput {
			crate::output::CreateGameNamespaceTokenPublicOutput { token: self.token }
		}
	}
}
impl CreateGameNamespaceTokenPublicOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameNamespaceTokenPublicOutput`](crate::output::CreateGameNamespaceTokenPublicOutput)
	pub fn builder() -> crate::output::create_game_namespace_token_public_output::Builder {
		crate::output::create_game_namespace_token_public_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct UpdateGameNamespaceVersionOutput {}
impl std::fmt::Debug for UpdateGameNamespaceVersionOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("UpdateGameNamespaceVersionOutput");
		formatter.finish()
	}
}
/// See [`UpdateGameNamespaceVersionOutput`](crate::output::UpdateGameNamespaceVersionOutput)
pub mod update_game_namespace_version_output {
	/// A builder for [`UpdateGameNamespaceVersionOutput`](crate::output::UpdateGameNamespaceVersionOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`UpdateGameNamespaceVersionOutput`](crate::output::UpdateGameNamespaceVersionOutput)
		pub fn build(self) -> crate::output::UpdateGameNamespaceVersionOutput {
			crate::output::UpdateGameNamespaceVersionOutput {}
		}
	}
}
impl UpdateGameNamespaceVersionOutput {
	/// Creates a new builder-style object to manufacture [`UpdateGameNamespaceVersionOutput`](crate::output::UpdateGameNamespaceVersionOutput)
	pub fn builder() -> crate::output::update_game_namespace_version_output::Builder {
		crate::output::update_game_namespace_version_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameNamespaceByIdOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub namespace: std::option::Option<crate::model::NamespaceFull>,
}
impl GetGameNamespaceByIdOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn namespace(&self) -> std::option::Option<&crate::model::NamespaceFull> {
		self.namespace.as_ref()
	}
}
impl std::fmt::Debug for GetGameNamespaceByIdOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameNamespaceByIdOutput");
		formatter.field("namespace", &self.namespace);
		formatter.finish()
	}
}
/// See [`GetGameNamespaceByIdOutput`](crate::output::GetGameNamespaceByIdOutput)
pub mod get_game_namespace_by_id_output {
	/// A builder for [`GetGameNamespaceByIdOutput`](crate::output::GetGameNamespaceByIdOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) namespace: std::option::Option<crate::model::NamespaceFull>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn namespace(mut self, input: crate::model::NamespaceFull) -> Self {
			self.namespace = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_namespace(
			mut self,
			input: std::option::Option<crate::model::NamespaceFull>,
		) -> Self {
			self.namespace = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameNamespaceByIdOutput`](crate::output::GetGameNamespaceByIdOutput)
		pub fn build(self) -> crate::output::GetGameNamespaceByIdOutput {
			crate::output::GetGameNamespaceByIdOutput {
				namespace: self.namespace,
			}
		}
	}
}
impl GetGameNamespaceByIdOutput {
	/// Creates a new builder-style object to manufacture [`GetGameNamespaceByIdOutput`](crate::output::GetGameNamespaceByIdOutput)
	pub fn builder() -> crate::output::get_game_namespace_by_id_output::Builder {
		crate::output::get_game_namespace_by_id_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameNamespaceOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub namespace_id: std::option::Option<std::string::String>,
}
impl CreateGameNamespaceOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn namespace_id(&self) -> std::option::Option<&str> {
		self.namespace_id.as_deref()
	}
}
impl std::fmt::Debug for CreateGameNamespaceOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameNamespaceOutput");
		formatter.field("namespace_id", &self.namespace_id);
		formatter.finish()
	}
}
/// See [`CreateGameNamespaceOutput`](crate::output::CreateGameNamespaceOutput)
pub mod create_game_namespace_output {
	/// A builder for [`CreateGameNamespaceOutput`](crate::output::CreateGameNamespaceOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) namespace_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn namespace_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.namespace_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_namespace_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.namespace_id = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameNamespaceOutput`](crate::output::CreateGameNamespaceOutput)
		pub fn build(self) -> crate::output::CreateGameNamespaceOutput {
			crate::output::CreateGameNamespaceOutput {
				namespace_id: self.namespace_id,
			}
		}
	}
}
impl CreateGameNamespaceOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameNamespaceOutput`](crate::output::CreateGameNamespaceOutput)
	pub fn builder() -> crate::output::create_game_namespace_output::Builder {
		crate::output::create_game_namespace_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameVersionOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameVersionOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameVersionOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameVersionOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameVersionOutput`](crate::output::ValidateGameVersionOutput)
pub mod validate_game_version_output {
	/// A builder for [`ValidateGameVersionOutput`](crate::output::ValidateGameVersionOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameVersionOutput`](crate::output::ValidateGameVersionOutput)
		pub fn build(self) -> crate::output::ValidateGameVersionOutput {
			crate::output::ValidateGameVersionOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameVersionOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameVersionOutput`](crate::output::ValidateGameVersionOutput)
	pub fn builder() -> crate::output::validate_game_version_output::Builder {
		crate::output::validate_game_version_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameVersionByIdOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub version: std::option::Option<crate::model::VersionFull>,
}
impl GetGameVersionByIdOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn version(&self) -> std::option::Option<&crate::model::VersionFull> {
		self.version.as_ref()
	}
}
impl std::fmt::Debug for GetGameVersionByIdOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameVersionByIdOutput");
		formatter.field("version", &self.version);
		formatter.finish()
	}
}
/// See [`GetGameVersionByIdOutput`](crate::output::GetGameVersionByIdOutput)
pub mod get_game_version_by_id_output {
	/// A builder for [`GetGameVersionByIdOutput`](crate::output::GetGameVersionByIdOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) version: std::option::Option<crate::model::VersionFull>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn version(mut self, input: crate::model::VersionFull) -> Self {
			self.version = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_version(
			mut self,
			input: std::option::Option<crate::model::VersionFull>,
		) -> Self {
			self.version = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameVersionByIdOutput`](crate::output::GetGameVersionByIdOutput)
		pub fn build(self) -> crate::output::GetGameVersionByIdOutput {
			crate::output::GetGameVersionByIdOutput {
				version: self.version,
			}
		}
	}
}
impl GetGameVersionByIdOutput {
	/// Creates a new builder-style object to manufacture [`GetGameVersionByIdOutput`](crate::output::GetGameVersionByIdOutput)
	pub fn builder() -> crate::output::get_game_version_by_id_output::Builder {
		crate::output::get_game_version_by_id_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameVersionOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub version_id: std::option::Option<std::string::String>,
}
impl CreateGameVersionOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn version_id(&self) -> std::option::Option<&str> {
		self.version_id.as_deref()
	}
}
impl std::fmt::Debug for CreateGameVersionOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameVersionOutput");
		formatter.field("version_id", &self.version_id);
		formatter.finish()
	}
}
/// See [`CreateGameVersionOutput`](crate::output::CreateGameVersionOutput)
pub mod create_game_version_output {
	/// A builder for [`CreateGameVersionOutput`](crate::output::CreateGameVersionOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) version_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn version_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.version_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_version_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.version_id = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameVersionOutput`](crate::output::CreateGameVersionOutput)
		pub fn build(self) -> crate::output::CreateGameVersionOutput {
			crate::output::CreateGameVersionOutput {
				version_id: self.version_id,
			}
		}
	}
}
impl CreateGameVersionOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameVersionOutput`](crate::output::CreateGameVersionOutput)
	pub fn builder() -> crate::output::create_game_version_output::Builder {
		crate::output::create_game_version_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct ValidateGameOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
}
impl ValidateGameOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn errors(&self) -> std::option::Option<&[crate::model::ValidationError]> {
		self.errors.as_deref()
	}
}
impl std::fmt::Debug for ValidateGameOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("ValidateGameOutput");
		formatter.field("errors", &self.errors);
		formatter.finish()
	}
}
/// See [`ValidateGameOutput`](crate::output::ValidateGameOutput)
pub mod validate_game_output {
	/// A builder for [`ValidateGameOutput`](crate::output::ValidateGameOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) errors: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
	}
	impl Builder {
		/// Appends an item to `errors`.
		///
		/// To override the contents of this collection use [`set_errors`](Self::set_errors).
		///
		pub fn errors(mut self, input: crate::model::ValidationError) -> Self {
			let mut v = self.errors.unwrap_or_default();
			v.push(input);
			self.errors = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_errors(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::ValidationError>>,
		) -> Self {
			self.errors = input;
			self
		}
		/// Consumes the builder and constructs a [`ValidateGameOutput`](crate::output::ValidateGameOutput)
		pub fn build(self) -> crate::output::ValidateGameOutput {
			crate::output::ValidateGameOutput {
				errors: self.errors,
			}
		}
	}
}
impl ValidateGameOutput {
	/// Creates a new builder-style object to manufacture [`ValidateGameOutput`](crate::output::ValidateGameOutput)
	pub fn builder() -> crate::output::validate_game_output::Builder {
		crate::output::validate_game_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGameByIdOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub game: std::option::Option<crate::model::GameFull>,
}
impl GetGameByIdOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn game(&self) -> std::option::Option<&crate::model::GameFull> {
		self.game.as_ref()
	}
}
impl std::fmt::Debug for GetGameByIdOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGameByIdOutput");
		formatter.field("game", &self.game);
		formatter.finish()
	}
}
/// See [`GetGameByIdOutput`](crate::output::GetGameByIdOutput)
pub mod get_game_by_id_output {
	/// A builder for [`GetGameByIdOutput`](crate::output::GetGameByIdOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game: std::option::Option<crate::model::GameFull>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn game(mut self, input: crate::model::GameFull) -> Self {
			self.game = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_game(mut self, input: std::option::Option<crate::model::GameFull>) -> Self {
			self.game = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGameByIdOutput`](crate::output::GetGameByIdOutput)
		pub fn build(self) -> crate::output::GetGameByIdOutput {
			crate::output::GetGameByIdOutput { game: self.game }
		}
	}
}
impl GetGameByIdOutput {
	/// Creates a new builder-style object to manufacture [`GetGameByIdOutput`](crate::output::GetGameByIdOutput)
	pub fn builder() -> crate::output::get_game_by_id_output::Builder {
		crate::output::get_game_by_id_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CreateGameOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub game_id: std::option::Option<std::string::String>,
}
impl CreateGameOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn game_id(&self) -> std::option::Option<&str> {
		self.game_id.as_deref()
	}
}
impl std::fmt::Debug for CreateGameOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CreateGameOutput");
		formatter.field("game_id", &self.game_id);
		formatter.finish()
	}
}
/// See [`CreateGameOutput`](crate::output::CreateGameOutput)
pub mod create_game_output {
	/// A builder for [`CreateGameOutput`](crate::output::CreateGameOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) game_id: std::option::Option<std::string::String>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn game_id(mut self, input: impl Into<std::string::String>) -> Self {
			self.game_id = Some(input.into());
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_game_id(mut self, input: std::option::Option<std::string::String>) -> Self {
			self.game_id = input;
			self
		}
		/// Consumes the builder and constructs a [`CreateGameOutput`](crate::output::CreateGameOutput)
		pub fn build(self) -> crate::output::CreateGameOutput {
			crate::output::CreateGameOutput {
				game_id: self.game_id,
			}
		}
	}
}
impl CreateGameOutput {
	/// Creates a new builder-style object to manufacture [`CreateGameOutput`](crate::output::CreateGameOutput)
	pub fn builder() -> crate::output::create_game_output::Builder {
		crate::output::create_game_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct GetGamesOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub games: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
	#[allow(missing_docs)] // documentation missing in model
	pub teams: std::option::Option<std::vec::Vec<crate::model::TeamSummary>>,
}
impl GetGamesOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn games(&self) -> std::option::Option<&[crate::model::GameSummary]> {
		self.games.as_deref()
	}
	#[allow(missing_docs)] // documentation missing in model
	pub fn teams(&self) -> std::option::Option<&[crate::model::TeamSummary]> {
		self.teams.as_deref()
	}
}
impl std::fmt::Debug for GetGamesOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("GetGamesOutput");
		formatter.field("games", &self.games);
		formatter.field("teams", &self.teams);
		formatter.finish()
	}
}
/// See [`GetGamesOutput`](crate::output::GetGamesOutput)
pub mod get_games_output {
	/// A builder for [`GetGamesOutput`](crate::output::GetGamesOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) games: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
		pub(crate) teams: std::option::Option<std::vec::Vec<crate::model::TeamSummary>>,
	}
	impl Builder {
		/// Appends an item to `games`.
		///
		/// To override the contents of this collection use [`set_games`](Self::set_games).
		///
		pub fn games(mut self, input: crate::model::GameSummary) -> Self {
			let mut v = self.games.unwrap_or_default();
			v.push(input);
			self.games = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_games(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::GameSummary>>,
		) -> Self {
			self.games = input;
			self
		}
		/// Appends an item to `teams`.
		///
		/// To override the contents of this collection use [`set_teams`](Self::set_teams).
		///
		pub fn teams(mut self, input: crate::model::TeamSummary) -> Self {
			let mut v = self.teams.unwrap_or_default();
			v.push(input);
			self.teams = Some(v);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_teams(
			mut self,
			input: std::option::Option<std::vec::Vec<crate::model::TeamSummary>>,
		) -> Self {
			self.teams = input;
			self
		}
		/// Consumes the builder and constructs a [`GetGamesOutput`](crate::output::GetGamesOutput)
		pub fn build(self) -> crate::output::GetGamesOutput {
			crate::output::GetGamesOutput {
				games: self.games,
				teams: self.teams,
			}
		}
	}
}
impl GetGamesOutput {
	/// Creates a new builder-style object to manufacture [`GetGamesOutput`](crate::output::GetGamesOutput)
	pub fn builder() -> crate::output::get_games_output::Builder {
		crate::output::get_games_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct CompleteUploadOutput {}
impl std::fmt::Debug for CompleteUploadOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("CompleteUploadOutput");
		formatter.finish()
	}
}
/// See [`CompleteUploadOutput`](crate::output::CompleteUploadOutput)
pub mod complete_upload_output {
	/// A builder for [`CompleteUploadOutput`](crate::output::CompleteUploadOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {}
	impl Builder {
		/// Consumes the builder and constructs a [`CompleteUploadOutput`](crate::output::CompleteUploadOutput)
		pub fn build(self) -> crate::output::CompleteUploadOutput {
			crate::output::CompleteUploadOutput {}
		}
	}
}
impl CompleteUploadOutput {
	/// Creates a new builder-style object to manufacture [`CompleteUploadOutput`](crate::output::CompleteUploadOutput)
	pub fn builder() -> crate::output::complete_upload_output::Builder {
		crate::output::complete_upload_output::Builder::default()
	}
}

#[allow(missing_docs)] // documentation missing in model
#[non_exhaustive]
#[derive(std::clone::Clone, std::cmp::PartialEq)]
pub struct InspectOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub agent: std::option::Option<crate::model::AuthAgent>,
}
impl InspectOutput {
	#[allow(missing_docs)] // documentation missing in model
	pub fn agent(&self) -> std::option::Option<&crate::model::AuthAgent> {
		self.agent.as_ref()
	}
}
impl std::fmt::Debug for InspectOutput {
	fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
		let mut formatter = f.debug_struct("InspectOutput");
		formatter.field("agent", &self.agent);
		formatter.finish()
	}
}
/// See [`InspectOutput`](crate::output::InspectOutput)
pub mod inspect_output {
	/// A builder for [`InspectOutput`](crate::output::InspectOutput)
	#[non_exhaustive]
	#[derive(std::default::Default, std::clone::Clone, std::cmp::PartialEq, std::fmt::Debug)]
	pub struct Builder {
		pub(crate) agent: std::option::Option<crate::model::AuthAgent>,
	}
	impl Builder {
		#[allow(missing_docs)] // documentation missing in model
		pub fn agent(mut self, input: crate::model::AuthAgent) -> Self {
			self.agent = Some(input);
			self
		}
		#[allow(missing_docs)] // documentation missing in model
		pub fn set_agent(mut self, input: std::option::Option<crate::model::AuthAgent>) -> Self {
			self.agent = input;
			self
		}
		/// Consumes the builder and constructs a [`InspectOutput`](crate::output::InspectOutput)
		pub fn build(self) -> crate::output::InspectOutput {
			crate::output::InspectOutput { agent: self.agent }
		}
	}
}
impl InspectOutput {
	/// Creates a new builder-style object to manufacture [`InspectOutput`](crate::output::InspectOutput)
	pub fn builder() -> crate::output::inspect_output::Builder {
		crate::output::inspect_output::Builder::default()
	}
}
