// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
/// Operation shape for `CompleteUpload`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`complete_upload`](crate::client::Client::complete_upload).
///
/// See [`crate::client::fluent_builders::CompleteUpload`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CompleteUpload {
	_private: (),
}
impl CompleteUpload {
	/// Creates a new builder-style object to manufacture [`CompleteUploadInput`](crate::input::CompleteUploadInput)
	pub fn builder() -> crate::input::complete_upload_input::Builder {
		crate::input::complete_upload_input::Builder::default()
	}
	/// Creates a new `CompleteUpload` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CompleteUpload {
	type Output =
		std::result::Result<crate::output::CompleteUploadOutput, crate::error::CompleteUploadError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_complete_upload_error(response)
		} else {
			crate::operation_deser::parse_complete_upload_response(response)
		}
	}
}

/// Operation shape for `ConvertTeam`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`convert_team`](crate::client::Client::convert_team).
///
/// See [`crate::client::fluent_builders::ConvertTeam`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ConvertTeam {
	_private: (),
}
impl ConvertTeam {
	/// Creates a new builder-style object to manufacture [`ConvertTeamInput`](crate::input::ConvertTeamInput)
	pub fn builder() -> crate::input::convert_team_input::Builder {
		crate::input::convert_team_input::Builder::default()
	}
	/// Creates a new `ConvertTeam` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ConvertTeam {
	type Output =
		std::result::Result<crate::output::ConvertTeamOutput, crate::error::ConvertTeamError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_convert_team_error(response)
		} else {
			crate::operation_deser::parse_convert_team_response(response)
		}
	}
}

/// Operation shape for `CreateCloudToken`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_cloud_token`](crate::client::Client::create_cloud_token).
///
/// See [`crate::client::fluent_builders::CreateCloudToken`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateCloudToken {
	_private: (),
}
impl CreateCloudToken {
	/// Creates a new builder-style object to manufacture [`CreateCloudTokenInput`](crate::input::CreateCloudTokenInput)
	pub fn builder() -> crate::input::create_cloud_token_input::Builder {
		crate::input::create_cloud_token_input::Builder::default()
	}
	/// Creates a new `CreateCloudToken` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateCloudToken {
	type Output = std::result::Result<
		crate::output::CreateCloudTokenOutput,
		crate::error::CreateCloudTokenError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_cloud_token_error(response)
		} else {
			crate::operation_deser::parse_create_cloud_token_response(response)
		}
	}
}

/// Operation shape for `CreateGame`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_game`](crate::client::Client::create_game).
///
/// See [`crate::client::fluent_builders::CreateGame`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGame {
	_private: (),
}
impl CreateGame {
	/// Creates a new builder-style object to manufacture [`CreateGameInput`](crate::input::CreateGameInput)
	pub fn builder() -> crate::input::create_game_input::Builder {
		crate::input::create_game_input::Builder::default()
	}
	/// Creates a new `CreateGame` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGame {
	type Output =
		std::result::Result<crate::output::CreateGameOutput, crate::error::CreateGameError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_game_error(response)
		} else {
			crate::operation_deser::parse_create_game_response(response)
		}
	}
}

/// Operation shape for `CreateGameBuild`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_game_build`](crate::client::Client::create_game_build).
///
/// See [`crate::client::fluent_builders::CreateGameBuild`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGameBuild {
	_private: (),
}
impl CreateGameBuild {
	/// Creates a new builder-style object to manufacture [`CreateGameBuildInput`](crate::input::CreateGameBuildInput)
	pub fn builder() -> crate::input::create_game_build_input::Builder {
		crate::input::create_game_build_input::Builder::default()
	}
	/// Creates a new `CreateGameBuild` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGameBuild {
	type Output = std::result::Result<
		crate::output::CreateGameBuildOutput,
		crate::error::CreateGameBuildError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_game_build_error(response)
		} else {
			crate::operation_deser::parse_create_game_build_response(response)
		}
	}
}

/// Operation shape for `CreateGameCdnSite`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_game_cdn_site`](crate::client::Client::create_game_cdn_site).
///
/// See [`crate::client::fluent_builders::CreateGameCdnSite`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGameCdnSite {
	_private: (),
}
impl CreateGameCdnSite {
	/// Creates a new builder-style object to manufacture [`CreateGameCdnSiteInput`](crate::input::CreateGameCdnSiteInput)
	pub fn builder() -> crate::input::create_game_cdn_site_input::Builder {
		crate::input::create_game_cdn_site_input::Builder::default()
	}
	/// Creates a new `CreateGameCdnSite` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGameCdnSite {
	type Output = std::result::Result<
		crate::output::CreateGameCdnSiteOutput,
		crate::error::CreateGameCdnSiteError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_game_cdn_site_error(response)
		} else {
			crate::operation_deser::parse_create_game_cdn_site_response(response)
		}
	}
}

/// Operation shape for `CreateGameNamespace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_game_namespace`](crate::client::Client::create_game_namespace).
///
/// See [`crate::client::fluent_builders::CreateGameNamespace`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGameNamespace {
	_private: (),
}
impl CreateGameNamespace {
	/// Creates a new builder-style object to manufacture [`CreateGameNamespaceInput`](crate::input::CreateGameNamespaceInput)
	pub fn builder() -> crate::input::create_game_namespace_input::Builder {
		crate::input::create_game_namespace_input::Builder::default()
	}
	/// Creates a new `CreateGameNamespace` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGameNamespace {
	type Output = std::result::Result<
		crate::output::CreateGameNamespaceOutput,
		crate::error::CreateGameNamespaceError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_game_namespace_error(response)
		} else {
			crate::operation_deser::parse_create_game_namespace_response(response)
		}
	}
}

/// Operation shape for `CreateGameNamespaceTokenDevelopment`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_game_namespace_token_development`](crate::client::Client::create_game_namespace_token_development).
///
/// See [`crate::client::fluent_builders::CreateGameNamespaceTokenDevelopment`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGameNamespaceTokenDevelopment {
	_private: (),
}
impl CreateGameNamespaceTokenDevelopment {
	/// Creates a new builder-style object to manufacture [`CreateGameNamespaceTokenDevelopmentInput`](crate::input::CreateGameNamespaceTokenDevelopmentInput)
	pub fn builder() -> crate::input::create_game_namespace_token_development_input::Builder {
		crate::input::create_game_namespace_token_development_input::Builder::default()
	}
	/// Creates a new `CreateGameNamespaceTokenDevelopment` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGameNamespaceTokenDevelopment {
	type Output = std::result::Result<
		crate::output::CreateGameNamespaceTokenDevelopmentOutput,
		crate::error::CreateGameNamespaceTokenDevelopmentError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_game_namespace_token_development_error(response)
		} else {
			crate::operation_deser::parse_create_game_namespace_token_development_response(response)
		}
	}
}

/// Operation shape for `CreateGameNamespaceTokenPublic`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_game_namespace_token_public`](crate::client::Client::create_game_namespace_token_public).
///
/// See [`crate::client::fluent_builders::CreateGameNamespaceTokenPublic`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGameNamespaceTokenPublic {
	_private: (),
}
impl CreateGameNamespaceTokenPublic {
	/// Creates a new builder-style object to manufacture [`CreateGameNamespaceTokenPublicInput`](crate::input::CreateGameNamespaceTokenPublicInput)
	pub fn builder() -> crate::input::create_game_namespace_token_public_input::Builder {
		crate::input::create_game_namespace_token_public_input::Builder::default()
	}
	/// Creates a new `CreateGameNamespaceTokenPublic` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGameNamespaceTokenPublic {
	type Output = std::result::Result<
		crate::output::CreateGameNamespaceTokenPublicOutput,
		crate::error::CreateGameNamespaceTokenPublicError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_game_namespace_token_public_error(response)
		} else {
			crate::operation_deser::parse_create_game_namespace_token_public_response(response)
		}
	}
}

/// Operation shape for `CreateGameVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`create_game_version`](crate::client::Client::create_game_version).
///
/// See [`crate::client::fluent_builders::CreateGameVersion`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct CreateGameVersion {
	_private: (),
}
impl CreateGameVersion {
	/// Creates a new builder-style object to manufacture [`CreateGameVersionInput`](crate::input::CreateGameVersionInput)
	pub fn builder() -> crate::input::create_game_version_input::Builder {
		crate::input::create_game_version_input::Builder::default()
	}
	/// Creates a new `CreateGameVersion` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for CreateGameVersion {
	type Output = std::result::Result<
		crate::output::CreateGameVersionOutput,
		crate::error::CreateGameVersionError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_create_game_version_error(response)
		} else {
			crate::operation_deser::parse_create_game_version_response(response)
		}
	}
}

/// Operation shape for `DeleteMatchmakerLobby`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`delete_matchmaker_lobby`](crate::client::Client::delete_matchmaker_lobby).
///
/// See [`crate::client::fluent_builders::DeleteMatchmakerLobby`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct DeleteMatchmakerLobby {
	_private: (),
}
impl DeleteMatchmakerLobby {
	/// Creates a new builder-style object to manufacture [`DeleteMatchmakerLobbyInput`](crate::input::DeleteMatchmakerLobbyInput)
	pub fn builder() -> crate::input::delete_matchmaker_lobby_input::Builder {
		crate::input::delete_matchmaker_lobby_input::Builder::default()
	}
	/// Creates a new `DeleteMatchmakerLobby` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for DeleteMatchmakerLobby {
	type Output = std::result::Result<
		crate::output::DeleteMatchmakerLobbyOutput,
		crate::error::DeleteMatchmakerLobbyError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_delete_matchmaker_lobby_error(response)
		} else {
			crate::operation_deser::parse_delete_matchmaker_lobby_response(response)
		}
	}
}

/// Operation shape for `ExportMatchmakerLobbyHistory`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`export_matchmaker_lobby_history`](crate::client::Client::export_matchmaker_lobby_history).
///
/// See [`crate::client::fluent_builders::ExportMatchmakerLobbyHistory`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ExportMatchmakerLobbyHistory {
	_private: (),
}
impl ExportMatchmakerLobbyHistory {
	/// Creates a new builder-style object to manufacture [`ExportMatchmakerLobbyHistoryInput`](crate::input::ExportMatchmakerLobbyHistoryInput)
	pub fn builder() -> crate::input::export_matchmaker_lobby_history_input::Builder {
		crate::input::export_matchmaker_lobby_history_input::Builder::default()
	}
	/// Creates a new `ExportMatchmakerLobbyHistory` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ExportMatchmakerLobbyHistory {
	type Output = std::result::Result<
		crate::output::ExportMatchmakerLobbyHistoryOutput,
		crate::error::ExportMatchmakerLobbyHistoryError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_export_matchmaker_lobby_history_error(response)
		} else {
			crate::operation_deser::parse_export_matchmaker_lobby_history_response(response)
		}
	}
}

/// Operation shape for `GetGameById`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_game_by_id`](crate::client::Client::get_game_by_id).
///
/// See [`crate::client::fluent_builders::GetGameById`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGameById {
	_private: (),
}
impl GetGameById {
	/// Creates a new builder-style object to manufacture [`GetGameByIdInput`](crate::input::GetGameByIdInput)
	pub fn builder() -> crate::input::get_game_by_id_input::Builder {
		crate::input::get_game_by_id_input::Builder::default()
	}
	/// Creates a new `GetGameById` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGameById {
	type Output =
		std::result::Result<crate::output::GetGameByIdOutput, crate::error::GetGameByIdError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_game_by_id_error(response)
		} else {
			crate::operation_deser::parse_get_game_by_id_response(response)
		}
	}
}

/// Operation shape for `GetGameNamespaceById`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_game_namespace_by_id`](crate::client::Client::get_game_namespace_by_id).
///
/// See [`crate::client::fluent_builders::GetGameNamespaceById`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGameNamespaceById {
	_private: (),
}
impl GetGameNamespaceById {
	/// Creates a new builder-style object to manufacture [`GetGameNamespaceByIdInput`](crate::input::GetGameNamespaceByIdInput)
	pub fn builder() -> crate::input::get_game_namespace_by_id_input::Builder {
		crate::input::get_game_namespace_by_id_input::Builder::default()
	}
	/// Creates a new `GetGameNamespaceById` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGameNamespaceById {
	type Output = std::result::Result<
		crate::output::GetGameNamespaceByIdOutput,
		crate::error::GetGameNamespaceByIdError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_game_namespace_by_id_error(response)
		} else {
			crate::operation_deser::parse_get_game_namespace_by_id_response(response)
		}
	}
}

/// Operation shape for `GetGames`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_games`](crate::client::Client::get_games).
///
/// See [`crate::client::fluent_builders::GetGames`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGames {
	_private: (),
}
impl GetGames {
	/// Creates a new builder-style object to manufacture [`GetGamesInput`](crate::input::GetGamesInput)
	pub fn builder() -> crate::input::get_games_input::Builder {
		crate::input::get_games_input::Builder::default()
	}
	/// Creates a new `GetGames` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGames {
	type Output = std::result::Result<crate::output::GetGamesOutput, crate::error::GetGamesError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_games_error(response)
		} else {
			crate::operation_deser::parse_get_games_response(response)
		}
	}
}

/// Operation shape for `GetGameVersionById`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_game_version_by_id`](crate::client::Client::get_game_version_by_id).
///
/// See [`crate::client::fluent_builders::GetGameVersionById`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetGameVersionById {
	_private: (),
}
impl GetGameVersionById {
	/// Creates a new builder-style object to manufacture [`GetGameVersionByIdInput`](crate::input::GetGameVersionByIdInput)
	pub fn builder() -> crate::input::get_game_version_by_id_input::Builder {
		crate::input::get_game_version_by_id_input::Builder::default()
	}
	/// Creates a new `GetGameVersionById` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetGameVersionById {
	type Output = std::result::Result<
		crate::output::GetGameVersionByIdOutput,
		crate::error::GetGameVersionByIdError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_game_version_by_id_error(response)
		} else {
			crate::operation_deser::parse_get_game_version_by_id_response(response)
		}
	}
}

/// Operation shape for `GetNamespaceAnalyticsMatchmakerLive`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_namespace_analytics_matchmaker_live`](crate::client::Client::get_namespace_analytics_matchmaker_live).
///
/// See [`crate::client::fluent_builders::GetNamespaceAnalyticsMatchmakerLive`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetNamespaceAnalyticsMatchmakerLive {
	_private: (),
}
impl GetNamespaceAnalyticsMatchmakerLive {
	/// Creates a new builder-style object to manufacture [`GetNamespaceAnalyticsMatchmakerLiveInput`](crate::input::GetNamespaceAnalyticsMatchmakerLiveInput)
	pub fn builder() -> crate::input::get_namespace_analytics_matchmaker_live_input::Builder {
		crate::input::get_namespace_analytics_matchmaker_live_input::Builder::default()
	}
	/// Creates a new `GetNamespaceAnalyticsMatchmakerLive` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetNamespaceAnalyticsMatchmakerLive {
	type Output = std::result::Result<
		crate::output::GetNamespaceAnalyticsMatchmakerLiveOutput,
		crate::error::GetNamespaceAnalyticsMatchmakerLiveError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_namespace_analytics_matchmaker_live_error(response)
		} else {
			crate::operation_deser::parse_get_namespace_analytics_matchmaker_live_response(response)
		}
	}
}

/// Operation shape for `GetNamespaceLobby`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_namespace_lobby`](crate::client::Client::get_namespace_lobby).
///
/// See [`crate::client::fluent_builders::GetNamespaceLobby`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetNamespaceLobby {
	_private: (),
}
impl GetNamespaceLobby {
	/// Creates a new builder-style object to manufacture [`GetNamespaceLobbyInput`](crate::input::GetNamespaceLobbyInput)
	pub fn builder() -> crate::input::get_namespace_lobby_input::Builder {
		crate::input::get_namespace_lobby_input::Builder::default()
	}
	/// Creates a new `GetNamespaceLobby` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetNamespaceLobby {
	type Output = std::result::Result<
		crate::output::GetNamespaceLobbyOutput,
		crate::error::GetNamespaceLobbyError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_namespace_lobby_error(response)
		} else {
			crate::operation_deser::parse_get_namespace_lobby_response(response)
		}
	}
}

/// Operation shape for `GetRayPerfLogs`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_ray_perf_logs`](crate::client::Client::get_ray_perf_logs).
///
/// See [`crate::client::fluent_builders::GetRayPerfLogs`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRayPerfLogs {
	_private: (),
}
impl GetRayPerfLogs {
	/// Creates a new builder-style object to manufacture [`GetRayPerfLogsInput`](crate::input::GetRayPerfLogsInput)
	pub fn builder() -> crate::input::get_ray_perf_logs_input::Builder {
		crate::input::get_ray_perf_logs_input::Builder::default()
	}
	/// Creates a new `GetRayPerfLogs` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetRayPerfLogs {
	type Output =
		std::result::Result<crate::output::GetRayPerfLogsOutput, crate::error::GetRayPerfLogsError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_ray_perf_logs_error(response)
		} else {
			crate::operation_deser::parse_get_ray_perf_logs_response(response)
		}
	}
}

/// Operation shape for `GetRegionTiers`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_region_tiers`](crate::client::Client::get_region_tiers).
///
/// See [`crate::client::fluent_builders::GetRegionTiers`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetRegionTiers {
	_private: (),
}
impl GetRegionTiers {
	/// Creates a new builder-style object to manufacture [`GetRegionTiersInput`](crate::input::GetRegionTiersInput)
	pub fn builder() -> crate::input::get_region_tiers_input::Builder {
		crate::input::get_region_tiers_input::Builder::default()
	}
	/// Creates a new `GetRegionTiers` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetRegionTiers {
	type Output =
		std::result::Result<crate::output::GetRegionTiersOutput, crate::error::GetRegionTiersError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_region_tiers_error(response)
		} else {
			crate::operation_deser::parse_get_region_tiers_response(response)
		}
	}
}

/// Operation shape for `GetTeamBilling`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_team_billing`](crate::client::Client::get_team_billing).
///
/// See [`crate::client::fluent_builders::GetTeamBilling`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTeamBilling {
	_private: (),
}
impl GetTeamBilling {
	/// Creates a new builder-style object to manufacture [`GetTeamBillingInput`](crate::input::GetTeamBillingInput)
	pub fn builder() -> crate::input::get_team_billing_input::Builder {
		crate::input::get_team_billing_input::Builder::default()
	}
	/// Creates a new `GetTeamBilling` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetTeamBilling {
	type Output =
		std::result::Result<crate::output::GetTeamBillingOutput, crate::error::GetTeamBillingError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_team_billing_error(response)
		} else {
			crate::operation_deser::parse_get_team_billing_response(response)
		}
	}
}

/// Operation shape for `GetTeamPaymentsList`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_team_payments_list`](crate::client::Client::get_team_payments_list).
///
/// See [`crate::client::fluent_builders::GetTeamPaymentsList`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTeamPaymentsList {
	_private: (),
}
impl GetTeamPaymentsList {
	/// Creates a new builder-style object to manufacture [`GetTeamPaymentsListInput`](crate::input::GetTeamPaymentsListInput)
	pub fn builder() -> crate::input::get_team_payments_list_input::Builder {
		crate::input::get_team_payments_list_input::Builder::default()
	}
	/// Creates a new `GetTeamPaymentsList` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetTeamPaymentsList {
	type Output = std::result::Result<
		crate::output::GetTeamPaymentsListOutput,
		crate::error::GetTeamPaymentsListError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_team_payments_list_error(response)
		} else {
			crate::operation_deser::parse_get_team_payments_list_response(response)
		}
	}
}

/// Operation shape for `GetTeamTransfersList`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`get_team_transfers_list`](crate::client::Client::get_team_transfers_list).
///
/// See [`crate::client::fluent_builders::GetTeamTransfersList`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct GetTeamTransfersList {
	_private: (),
}
impl GetTeamTransfersList {
	/// Creates a new builder-style object to manufacture [`GetTeamTransfersListInput`](crate::input::GetTeamTransfersListInput)
	pub fn builder() -> crate::input::get_team_transfers_list_input::Builder {
		crate::input::get_team_transfers_list_input::Builder::default()
	}
	/// Creates a new `GetTeamTransfersList` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for GetTeamTransfersList {
	type Output = std::result::Result<
		crate::output::GetTeamTransfersListOutput,
		crate::error::GetTeamTransfersListError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_get_team_transfers_list_error(response)
		} else {
			crate::operation_deser::parse_get_team_transfers_list_response(response)
		}
	}
}

/// Operation shape for `Inspect`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`inspect`](crate::client::Client::inspect).
///
/// See [`crate::client::fluent_builders::Inspect`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct Inspect {
	_private: (),
}
impl Inspect {
	/// Creates a new builder-style object to manufacture [`InspectInput`](crate::input::InspectInput)
	pub fn builder() -> crate::input::inspect_input::Builder {
		crate::input::inspect_input::Builder::default()
	}
	/// Creates a new `Inspect` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for Inspect {
	type Output = std::result::Result<crate::output::InspectOutput, crate::error::InspectError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_inspect_error(response)
		} else {
			crate::operation_deser::parse_inspect_response(response)
		}
	}
}

/// Operation shape for `ListGameBuilds`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_game_builds`](crate::client::Client::list_game_builds).
///
/// See [`crate::client::fluent_builders::ListGameBuilds`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGameBuilds {
	_private: (),
}
impl ListGameBuilds {
	/// Creates a new builder-style object to manufacture [`ListGameBuildsInput`](crate::input::ListGameBuildsInput)
	pub fn builder() -> crate::input::list_game_builds_input::Builder {
		crate::input::list_game_builds_input::Builder::default()
	}
	/// Creates a new `ListGameBuilds` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListGameBuilds {
	type Output =
		std::result::Result<crate::output::ListGameBuildsOutput, crate::error::ListGameBuildsError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_game_builds_error(response)
		} else {
			crate::operation_deser::parse_list_game_builds_response(response)
		}
	}
}

/// Operation shape for `ListGameCdnSites`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_game_cdn_sites`](crate::client::Client::list_game_cdn_sites).
///
/// See [`crate::client::fluent_builders::ListGameCdnSites`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListGameCdnSites {
	_private: (),
}
impl ListGameCdnSites {
	/// Creates a new builder-style object to manufacture [`ListGameCdnSitesInput`](crate::input::ListGameCdnSitesInput)
	pub fn builder() -> crate::input::list_game_cdn_sites_input::Builder {
		crate::input::list_game_cdn_sites_input::Builder::default()
	}
	/// Creates a new `ListGameCdnSites` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListGameCdnSites {
	type Output = std::result::Result<
		crate::output::ListGameCdnSitesOutput,
		crate::error::ListGameCdnSitesError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_game_cdn_sites_error(response)
		} else {
			crate::operation_deser::parse_list_game_cdn_sites_response(response)
		}
	}
}

/// Operation shape for `ListNamespaceLobbies`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`list_namespace_lobbies`](crate::client::Client::list_namespace_lobbies).
///
/// See [`crate::client::fluent_builders::ListNamespaceLobbies`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ListNamespaceLobbies {
	_private: (),
}
impl ListNamespaceLobbies {
	/// Creates a new builder-style object to manufacture [`ListNamespaceLobbiesInput`](crate::input::ListNamespaceLobbiesInput)
	pub fn builder() -> crate::input::list_namespace_lobbies_input::Builder {
		crate::input::list_namespace_lobbies_input::Builder::default()
	}
	/// Creates a new `ListNamespaceLobbies` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ListNamespaceLobbies {
	type Output = std::result::Result<
		crate::output::ListNamespaceLobbiesOutput,
		crate::error::ListNamespaceLobbiesError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_list_namespace_lobbies_error(response)
		} else {
			crate::operation_deser::parse_list_namespace_lobbies_response(response)
		}
	}
}

/// Operation shape for `RemoveNamespaceDomain`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`remove_namespace_domain`](crate::client::Client::remove_namespace_domain).
///
/// See [`crate::client::fluent_builders::RemoveNamespaceDomain`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct RemoveNamespaceDomain {
	_private: (),
}
impl RemoveNamespaceDomain {
	/// Creates a new builder-style object to manufacture [`RemoveNamespaceDomainInput`](crate::input::RemoveNamespaceDomainInput)
	pub fn builder() -> crate::input::remove_namespace_domain_input::Builder {
		crate::input::remove_namespace_domain_input::Builder::default()
	}
	/// Creates a new `RemoveNamespaceDomain` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for RemoveNamespaceDomain {
	type Output = std::result::Result<
		crate::output::RemoveNamespaceDomainOutput,
		crate::error::RemoveNamespaceDomainError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_remove_namespace_domain_error(response)
		} else {
			crate::operation_deser::parse_remove_namespace_domain_response(response)
		}
	}
}

/// Operation shape for `TeamBillingCheckout`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`team_billing_checkout`](crate::client::Client::team_billing_checkout).
///
/// See [`crate::client::fluent_builders::TeamBillingCheckout`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct TeamBillingCheckout {
	_private: (),
}
impl TeamBillingCheckout {
	/// Creates a new builder-style object to manufacture [`TeamBillingCheckoutInput`](crate::input::TeamBillingCheckoutInput)
	pub fn builder() -> crate::input::team_billing_checkout_input::Builder {
		crate::input::team_billing_checkout_input::Builder::default()
	}
	/// Creates a new `TeamBillingCheckout` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for TeamBillingCheckout {
	type Output = std::result::Result<
		crate::output::TeamBillingCheckoutOutput,
		crate::error::TeamBillingCheckoutError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_team_billing_checkout_error(response)
		} else {
			crate::operation_deser::parse_team_billing_checkout_response(response)
		}
	}
}

/// Operation shape for `ToggleNamespaceDomainPublicAuth`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`toggle_namespace_domain_public_auth`](crate::client::Client::toggle_namespace_domain_public_auth).
///
/// See [`crate::client::fluent_builders::ToggleNamespaceDomainPublicAuth`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ToggleNamespaceDomainPublicAuth {
	_private: (),
}
impl ToggleNamespaceDomainPublicAuth {
	/// Creates a new builder-style object to manufacture [`ToggleNamespaceDomainPublicAuthInput`](crate::input::ToggleNamespaceDomainPublicAuthInput)
	pub fn builder() -> crate::input::toggle_namespace_domain_public_auth_input::Builder {
		crate::input::toggle_namespace_domain_public_auth_input::Builder::default()
	}
	/// Creates a new `ToggleNamespaceDomainPublicAuth` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ToggleNamespaceDomainPublicAuth {
	type Output = std::result::Result<
		crate::output::ToggleNamespaceDomainPublicAuthOutput,
		crate::error::ToggleNamespaceDomainPublicAuthError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_toggle_namespace_domain_public_auth_error(response)
		} else {
			crate::operation_deser::parse_toggle_namespace_domain_public_auth_response(response)
		}
	}
}

/// Operation shape for `UpdateGameNamespaceMatchmakerConfig`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_game_namespace_matchmaker_config`](crate::client::Client::update_game_namespace_matchmaker_config).
///
/// See [`crate::client::fluent_builders::UpdateGameNamespaceMatchmakerConfig`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGameNamespaceMatchmakerConfig {
	_private: (),
}
impl UpdateGameNamespaceMatchmakerConfig {
	/// Creates a new builder-style object to manufacture [`UpdateGameNamespaceMatchmakerConfigInput`](crate::input::UpdateGameNamespaceMatchmakerConfigInput)
	pub fn builder() -> crate::input::update_game_namespace_matchmaker_config_input::Builder {
		crate::input::update_game_namespace_matchmaker_config_input::Builder::default()
	}
	/// Creates a new `UpdateGameNamespaceMatchmakerConfig` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateGameNamespaceMatchmakerConfig {
	type Output = std::result::Result<
		crate::output::UpdateGameNamespaceMatchmakerConfigOutput,
		crate::error::UpdateGameNamespaceMatchmakerConfigError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_update_game_namespace_matchmaker_config_error(response)
		} else {
			crate::operation_deser::parse_update_game_namespace_matchmaker_config_response(response)
		}
	}
}

/// Operation shape for `UpdateGameNamespaceVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_game_namespace_version`](crate::client::Client::update_game_namespace_version).
///
/// See [`crate::client::fluent_builders::UpdateGameNamespaceVersion`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateGameNamespaceVersion {
	_private: (),
}
impl UpdateGameNamespaceVersion {
	/// Creates a new builder-style object to manufacture [`UpdateGameNamespaceVersionInput`](crate::input::UpdateGameNamespaceVersionInput)
	pub fn builder() -> crate::input::update_game_namespace_version_input::Builder {
		crate::input::update_game_namespace_version_input::Builder::default()
	}
	/// Creates a new `UpdateGameNamespaceVersion` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateGameNamespaceVersion {
	type Output = std::result::Result<
		crate::output::UpdateGameNamespaceVersionOutput,
		crate::error::UpdateGameNamespaceVersionError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_update_game_namespace_version_error(response)
		} else {
			crate::operation_deser::parse_update_game_namespace_version_response(response)
		}
	}
}

/// Operation shape for `UpdateNamespaceDomain`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`update_namespace_domain`](crate::client::Client::update_namespace_domain).
///
/// See [`crate::client::fluent_builders::UpdateNamespaceDomain`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct UpdateNamespaceDomain {
	_private: (),
}
impl UpdateNamespaceDomain {
	/// Creates a new builder-style object to manufacture [`UpdateNamespaceDomainInput`](crate::input::UpdateNamespaceDomainInput)
	pub fn builder() -> crate::input::update_namespace_domain_input::Builder {
		crate::input::update_namespace_domain_input::Builder::default()
	}
	/// Creates a new `UpdateNamespaceDomain` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for UpdateNamespaceDomain {
	type Output = std::result::Result<
		crate::output::UpdateNamespaceDomainOutput,
		crate::error::UpdateNamespaceDomainError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_update_namespace_domain_error(response)
		} else {
			crate::operation_deser::parse_update_namespace_domain_response(response)
		}
	}
}

/// Operation shape for `ValidateGame`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`validate_game`](crate::client::Client::validate_game).
///
/// See [`crate::client::fluent_builders::ValidateGame`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateGame {
	_private: (),
}
impl ValidateGame {
	/// Creates a new builder-style object to manufacture [`ValidateGameInput`](crate::input::ValidateGameInput)
	pub fn builder() -> crate::input::validate_game_input::Builder {
		crate::input::validate_game_input::Builder::default()
	}
	/// Creates a new `ValidateGame` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ValidateGame {
	type Output =
		std::result::Result<crate::output::ValidateGameOutput, crate::error::ValidateGameError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_validate_game_error(response)
		} else {
			crate::operation_deser::parse_validate_game_response(response)
		}
	}
}

/// Operation shape for `ValidateGameNamespace`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`validate_game_namespace`](crate::client::Client::validate_game_namespace).
///
/// See [`crate::client::fluent_builders::ValidateGameNamespace`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateGameNamespace {
	_private: (),
}
impl ValidateGameNamespace {
	/// Creates a new builder-style object to manufacture [`ValidateGameNamespaceInput`](crate::input::ValidateGameNamespaceInput)
	pub fn builder() -> crate::input::validate_game_namespace_input::Builder {
		crate::input::validate_game_namespace_input::Builder::default()
	}
	/// Creates a new `ValidateGameNamespace` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ValidateGameNamespace {
	type Output = std::result::Result<
		crate::output::ValidateGameNamespaceOutput,
		crate::error::ValidateGameNamespaceError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_validate_game_namespace_error(response)
		} else {
			crate::operation_deser::parse_validate_game_namespace_response(response)
		}
	}
}

/// Operation shape for `ValidateGameNamespaceMatchmakerConfig`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`validate_game_namespace_matchmaker_config`](crate::client::Client::validate_game_namespace_matchmaker_config).
///
/// See [`crate::client::fluent_builders::ValidateGameNamespaceMatchmakerConfig`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateGameNamespaceMatchmakerConfig {
	_private: (),
}
impl ValidateGameNamespaceMatchmakerConfig {
	/// Creates a new builder-style object to manufacture [`ValidateGameNamespaceMatchmakerConfigInput`](crate::input::ValidateGameNamespaceMatchmakerConfigInput)
	pub fn builder() -> crate::input::validate_game_namespace_matchmaker_config_input::Builder {
		crate::input::validate_game_namespace_matchmaker_config_input::Builder::default()
	}
	/// Creates a new `ValidateGameNamespaceMatchmakerConfig` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ValidateGameNamespaceMatchmakerConfig {
	type Output = std::result::Result<
		crate::output::ValidateGameNamespaceMatchmakerConfigOutput,
		crate::error::ValidateGameNamespaceMatchmakerConfigError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_validate_game_namespace_matchmaker_config_error(response)
		} else {
			crate::operation_deser::parse_validate_game_namespace_matchmaker_config_response(
				response,
			)
		}
	}
}

/// Operation shape for `ValidateGameNamespaceTokenDevelopment`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`validate_game_namespace_token_development`](crate::client::Client::validate_game_namespace_token_development).
///
/// See [`crate::client::fluent_builders::ValidateGameNamespaceTokenDevelopment`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateGameNamespaceTokenDevelopment {
	_private: (),
}
impl ValidateGameNamespaceTokenDevelopment {
	/// Creates a new builder-style object to manufacture [`ValidateGameNamespaceTokenDevelopmentInput`](crate::input::ValidateGameNamespaceTokenDevelopmentInput)
	pub fn builder() -> crate::input::validate_game_namespace_token_development_input::Builder {
		crate::input::validate_game_namespace_token_development_input::Builder::default()
	}
	/// Creates a new `ValidateGameNamespaceTokenDevelopment` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ValidateGameNamespaceTokenDevelopment {
	type Output = std::result::Result<
		crate::output::ValidateGameNamespaceTokenDevelopmentOutput,
		crate::error::ValidateGameNamespaceTokenDevelopmentError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_validate_game_namespace_token_development_error(response)
		} else {
			crate::operation_deser::parse_validate_game_namespace_token_development_response(
				response,
			)
		}
	}
}

/// Operation shape for `ValidateGameVersion`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`validate_game_version`](crate::client::Client::validate_game_version).
///
/// See [`crate::client::fluent_builders::ValidateGameVersion`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateGameVersion {
	_private: (),
}
impl ValidateGameVersion {
	/// Creates a new builder-style object to manufacture [`ValidateGameVersionInput`](crate::input::ValidateGameVersionInput)
	pub fn builder() -> crate::input::validate_game_version_input::Builder {
		crate::input::validate_game_version_input::Builder::default()
	}
	/// Creates a new `ValidateGameVersion` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ValidateGameVersion {
	type Output = std::result::Result<
		crate::output::ValidateGameVersionOutput,
		crate::error::ValidateGameVersionError,
	>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_validate_game_version_error(response)
		} else {
			crate::operation_deser::parse_validate_game_version_response(response)
		}
	}
}

/// Operation shape for `ValidateTeam`.
///
/// This is usually constructed for you using the the fluent builder returned by
/// [`validate_team`](crate::client::Client::validate_team).
///
/// See [`crate::client::fluent_builders::ValidateTeam`] for more details about the operation.
#[derive(std::default::Default, std::clone::Clone, std::fmt::Debug)]
pub struct ValidateTeam {
	_private: (),
}
impl ValidateTeam {
	/// Creates a new builder-style object to manufacture [`ValidateTeamInput`](crate::input::ValidateTeamInput)
	pub fn builder() -> crate::input::validate_team_input::Builder {
		crate::input::validate_team_input::Builder::default()
	}
	/// Creates a new `ValidateTeam` operation.
	pub fn new() -> Self {
		Self { _private: () }
	}
}
impl aws_smithy_http::response::ParseStrictResponse for ValidateTeam {
	type Output =
		std::result::Result<crate::output::ValidateTeamOutput, crate::error::ValidateTeamError>;
	fn parse(&self, response: &http::Response<bytes::Bytes>) -> Self::Output {
		if !response.status().is_success() && response.status().as_u16() != 200 {
			crate::operation_deser::parse_validate_team_error(response)
		} else {
			crate::operation_deser::parse_validate_team_response(response)
		}
	}
}
