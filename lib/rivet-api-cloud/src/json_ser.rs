// Code generated by software.amazon.smithy.rust.codegen.smithy-rs. DO NOT EDIT.
pub fn serialize_structure_crate_input_create_game_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_1) = &input.developer_team_id {
		object.key("developer_team_id").string(var_1.as_str());
	}
	if let Some(var_2) = &input.display_name {
		object.key("display_name").string(var_2.as_str());
	}
	if let Some(var_3) = &input.name_id {
		object.key("name_id").string(var_3.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_build_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameBuildInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_4) = &input.display_name {
		object.key("display_name").string(var_4.as_str());
	}
	if let Some(var_5) = &input.image_file {
		let mut object_6 = object.key("image_file").start_object();
		crate::json_ser::serialize_structure_crate_model_upload_prepare_file(&mut object_6, var_5)?;
		object_6.finish();
	}
	if let Some(var_7) = &input.image_tag {
		object.key("image_tag").string(var_7.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_cdn_site_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameCdnSiteInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_8) = &input.display_name {
		object.key("display_name").string(var_8.as_str());
	}
	if let Some(var_9) = &input.files {
		let mut array_10 = object.key("files").start_array();
		for item_11 in var_9 {
			{
				let mut object_12 = array_10.value().start_object();
				crate::json_ser::serialize_structure_crate_model_upload_prepare_file(
					&mut object_12,
					item_11,
				)?;
				object_12.finish();
			}
		}
		array_10.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_namespace_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameNamespaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_13) = &input.display_name {
		object.key("display_name").string(var_13.as_str());
	}
	if let Some(var_14) = &input.name_id {
		object.key("name_id").string(var_14.as_str());
	}
	if let Some(var_15) = &input.version_id {
		object.key("version_id").string(var_15.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_namespace_token_development_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameNamespaceTokenDevelopmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_16) = &input.hostname {
		object.key("hostname").string(var_16.as_str());
	}
	if let Some(var_17) = &input.lobby_ports {
		let mut array_18 = object.key("lobby_ports").start_array();
		for item_19 in var_17 {
			{
				let mut object_20 = array_18.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_port(
					&mut object_20,
					item_19,
				)?;
				object_20.finish();
			}
		}
		array_18.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_create_game_version_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::CreateGameVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_21) = &input.config {
		let mut object_22 = object.key("config").start_object();
		crate::json_ser::serialize_structure_crate_model_cloud_version_config(
			&mut object_22,
			var_21,
		)?;
		object_22.finish();
	}
	if let Some(var_23) = &input.display_name {
		object.key("display_name").string(var_23.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_export_matchmaker_lobby_history_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ExportMatchmakerLobbyHistoryInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_24) = &input.query_end {
		object.key("query_end").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_24).into()),
		);
	}
	if let Some(var_25) = &input.query_start {
		object.key("query_start").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_25).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_team_billing_checkout_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::TeamBillingCheckoutInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_26) = &input.amount {
		object.key("amount").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_26).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_toggle_namespace_domain_public_auth_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ToggleNamespaceDomainPublicAuthInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_27) = &input.enabled {
		object.key("enabled").boolean(*var_27);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_game_namespace_matchmaker_config_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateGameNamespaceMatchmakerConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_28) = &input.lobby_count_max {
		object.key("lobby_count_max").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_28).into()),
		);
	}
	if let Some(var_29) = &input.max_players {
		object.key("max_players").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_29).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_update_game_namespace_version_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::UpdateGameNamespaceVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_30) = &input.version_id {
		object.key("version_id").string(var_30.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_31) = &input.display_name {
		object.key("display_name").string(var_31.as_str());
	}
	if let Some(var_32) = &input.name_id {
		object.key("name_id").string(var_32.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_namespace_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameNamespaceInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_33) = &input.display_name {
		object.key("display_name").string(var_33.as_str());
	}
	if let Some(var_34) = &input.name_id {
		object.key("name_id").string(var_34.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_namespace_matchmaker_config_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameNamespaceMatchmakerConfigInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_35) = &input.lobby_count_max {
		object.key("lobby_count_max").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_35).into()),
		);
	}
	if let Some(var_36) = &input.max_players {
		object.key("max_players").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_36).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_namespace_token_development_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameNamespaceTokenDevelopmentInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_37) = &input.hostname {
		object.key("hostname").string(var_37.as_str());
	}
	if let Some(var_38) = &input.lobby_ports {
		let mut array_39 = object.key("lobby_ports").start_array();
		for item_40 in var_38 {
			{
				let mut object_41 = array_39.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_port(
					&mut object_41,
					item_40,
				)?;
				object_41.finish();
			}
		}
		array_39.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_game_version_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateGameVersionInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_42) = &input.config {
		let mut object_43 = object.key("config").start_object();
		crate::json_ser::serialize_structure_crate_model_cloud_version_config(
			&mut object_43,
			var_42,
		)?;
		object_43.finish();
	}
	if let Some(var_44) = &input.display_name {
		object.key("display_name").string(var_44.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_input_validate_team_input(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::input::ValidateTeamInput,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_45) = &input.display_name {
		object.key("display_name").string(var_45.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_upload_prepare_file(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::UploadPrepareFile,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_46) = &input.path {
		object.key("path").string(var_46.as_str());
	}
	if let Some(var_47) = &input.content_type {
		object.key("content_type").string(var_47.as_str());
	}
	if let Some(var_48) = &input.content_length {
		object.key("content_length").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_48).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_runtime_docker_port(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntimeDockerPort,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_49) = &input.label {
		object.key("label").string(var_49.as_str());
	}
	if let Some(var_50) = &input.target_port {
		object.key("target_port").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_50).into()),
		);
	}
	if let Some(var_51) = &input.proxy_protocol {
		object.key("proxy_protocol").string(var_51.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cloud_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CloudVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_52) = &input.cdn {
		let mut object_53 = object.key("cdn").start_object();
		crate::json_ser::serialize_structure_crate_model_cdn_version_config(
			&mut object_53,
			var_52,
		)?;
		object_53.finish();
	}
	if let Some(var_54) = &input.matchmaker {
		let mut object_55 = object.key("matchmaker").start_object();
		crate::json_ser::serialize_structure_crate_model_matchmaker_version_config(
			&mut object_55,
			var_54,
		)?;
		object_55.finish();
	}
	if let Some(var_56) = &input.kv {
		let mut object_57 = object.key("kv").start_object();
		crate::json_ser::serialize_structure_crate_model_kv_version_config(&mut object_57, var_56)?;
		object_57.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_cdn_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::CdnVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_58) = &input.site_id {
		object.key("site_id").string(var_58.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_matchmaker_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::MatchmakerVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_59) = &input.lobby_groups {
		let mut array_60 = object.key("lobby_groups").start_array();
		for item_61 in var_59 {
			{
				let mut object_62 = array_60.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group(
					&mut object_62,
					item_61,
				)?;
				object_62.finish();
			}
		}
		array_60.finish();
	}
	if let Some(var_63) = &input.captcha {
		let mut object_64 = object.key("captcha").start_object();
		crate::json_ser::serialize_structure_crate_model_matchmaker_captcha(
			&mut object_64,
			var_63,
		)?;
		object_64.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_kv_version_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::KvVersionConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	let (_, _) = (object, input);
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroup,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_65) = &input.name_id {
		object.key("name_id").string(var_65.as_str());
	}
	if let Some(var_66) = &input.regions {
		let mut array_67 = object.key("regions").start_array();
		for item_68 in var_66 {
			{
				let mut object_69 = array_67.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_region(
					&mut object_69,
					item_68,
				)?;
				object_69.finish();
			}
		}
		array_67.finish();
	}
	if let Some(var_70) = &input.max_players_normal {
		object.key("max_players_normal").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_70).into()),
		);
	}
	if let Some(var_71) = &input.max_players_direct {
		object.key("max_players_direct").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_71).into()),
		);
	}
	if let Some(var_72) = &input.max_players_party {
		object.key("max_players_party").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_72).into()),
		);
	}
	if let Some(var_73) = &input.runtime {
		let mut object_74 = object.key("runtime").start_object();
		crate::json_ser::serialize_union_crate_model_lobby_group_runtime(&mut object_74, var_73)?;
		object_74.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_matchmaker_captcha(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::MatchmakerCaptcha,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_75) = &input.hcaptcha {
		let mut object_76 = object.key("hcaptcha").start_object();
		crate::json_ser::serialize_structure_crate_model_matchmaker_captcha_hcaptcha(
			&mut object_76,
			var_75,
		)?;
		object_76.finish();
	}
	if let Some(var_77) = &input.requests_before_reverify {
		object.key("requests_before_reverify").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_77).into()),
		);
	}
	if let Some(var_78) = &input.verification_ttl {
		object.key("verification_ttl").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_78).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_region(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRegion,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_79) = &input.region_id {
		object.key("region_id").string(var_79.as_str());
	}
	if let Some(var_80) = &input.tier_name_id {
		object.key("tier_name_id").string(var_80.as_str());
	}
	if let Some(var_81) = &input.idle_lobbies {
		let mut object_82 = object.key("idle_lobbies").start_object();
		crate::json_ser::serialize_structure_crate_model_idle_lobbies_config(
			&mut object_82,
			var_81,
		)?;
		object_82.finish();
	}
	Ok(())
}

pub fn serialize_union_crate_model_lobby_group_runtime(
	object_74: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntime,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	match input {
		crate::model::LobbyGroupRuntime::Docker(inner) => {
			let mut object_83 = object_74.key("docker").start_object();
			crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker(
				&mut object_83,
				inner,
			)?;
			object_83.finish();
		}
		crate::model::LobbyGroupRuntime::Unknown => {
			return Err(
				aws_smithy_http::operation::SerializationError::unknown_variant(
					"LobbyGroupRuntime",
				),
			)
		}
	}
	Ok(())
}

pub fn serialize_structure_crate_model_matchmaker_captcha_hcaptcha(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::MatchmakerCaptchaHcaptcha,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_84) = &input.level {
		object.key("level").string(var_84.as_str());
	}
	Ok(())
}

pub fn serialize_structure_crate_model_idle_lobbies_config(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::IdleLobbiesConfig,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_85) = &input.min_idle_lobbies {
		object.key("min_idle_lobbies").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_85).into()),
		);
	}
	if let Some(var_86) = &input.max_idle_lobbies {
		object.key("max_idle_lobbies").number(
			#[allow(clippy::useless_conversion)]
			aws_smithy_types::Number::NegInt((*var_86).into()),
		);
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_runtime_docker(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntimeDocker,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_87) = &input.build_id {
		object.key("build_id").string(var_87.as_str());
	}
	if let Some(var_88) = &input.args {
		let mut array_89 = object.key("args").start_array();
		for item_90 in var_88 {
			{
				array_89.value().string(item_90.as_str());
			}
		}
		array_89.finish();
	}
	if let Some(var_91) = &input.ports {
		let mut array_92 = object.key("ports").start_array();
		for item_93 in var_91 {
			{
				let mut object_94 = array_92.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_port(
					&mut object_94,
					item_93,
				)?;
				object_94.finish();
			}
		}
		array_92.finish();
	}
	if let Some(var_95) = &input.env_vars {
		let mut array_96 = object.key("env_vars").start_array();
		for item_97 in var_95 {
			{
				let mut object_98 = array_96.value().start_object();
				crate::json_ser::serialize_structure_crate_model_lobby_group_runtime_docker_env_var(&mut object_98, item_97)?;
				object_98.finish();
			}
		}
		array_96.finish();
	}
	Ok(())
}

pub fn serialize_structure_crate_model_lobby_group_runtime_docker_env_var(
	object: &mut aws_smithy_json::serialize::JsonObjectWriter,
	input: &crate::model::LobbyGroupRuntimeDockerEnvVar,
) -> Result<(), aws_smithy_http::operation::SerializationError> {
	if let Some(var_99) = &input.key {
		object.key("key").string(var_99.as_str());
	}
	if let Some(var_100) = &input.value {
		object.key("value").string(var_100.as_str());
	}
	Ok(())
}
