/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CommonsIdentityHandle : An identity handle.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CommonsIdentityHandle {
    #[serde(rename = "identity_id")]
    pub identity_id: uuid::Uuid,
    #[serde(rename = "display_name")]
    pub display_name: String,
    #[serde(rename = "account_number")]
    pub account_number: i32,
    /// The URL of this identity's avatar image.
    #[serde(rename = "avatar_url")]
    pub avatar_url: String,
    #[serde(rename = "presence", skip_serializing_if = "Option::is_none")]
    pub presence: Option<Box<crate::models::CommonsIdentityPresence>>,
    #[serde(rename = "party", skip_serializing_if = "Option::is_none")]
    pub party: Option<Box<crate::models::CommonsPartyHandle>>,
    /// Whether or not this identity is registered with a linked account.
    #[serde(rename = "is_registered")]
    pub is_registered: bool,
    #[serde(rename = "external")]
    pub external: Box<crate::models::CommonsIdentityExternalLinks>,
}

impl CommonsIdentityHandle {
    /// An identity handle.
    pub fn new(identity_id: uuid::Uuid, display_name: String, account_number: i32, avatar_url: String, is_registered: bool, external: crate::models::CommonsIdentityExternalLinks) -> CommonsIdentityHandle {
        CommonsIdentityHandle {
            identity_id,
            display_name,
            account_number,
            avatar_url,
            presence: None,
            party: None,
            is_registered,
            external: Box::new(external),
        }
    }
}


