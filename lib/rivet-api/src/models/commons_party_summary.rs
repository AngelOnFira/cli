/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CommonsPartySummary {
    #[serde(rename = "party_id")]
    pub party_id: uuid::Uuid,
    /// RFC3339 timestamp
    #[serde(rename = "create_ts")]
    pub create_ts: String,
    #[serde(rename = "activity")]
    pub activity: Box<crate::models::CommonsPartyActivity>,
    #[serde(rename = "external")]
    pub external: Box<crate::models::CommonsPartyExternalLinks>,
    #[serde(rename = "publicity")]
    pub publicity: Box<crate::models::CommonsPartyPublicity>,
    #[serde(rename = "party_size")]
    pub party_size: i32,
    #[serde(rename = "members")]
    pub members: Vec<crate::models::CommonsPartyMemberSummary>,
    #[serde(rename = "thread_id")]
    pub thread_id: uuid::Uuid,
}

impl CommonsPartySummary {
    pub fn new(party_id: uuid::Uuid, create_ts: String, activity: crate::models::CommonsPartyActivity, external: crate::models::CommonsPartyExternalLinks, publicity: crate::models::CommonsPartyPublicity, party_size: i32, members: Vec<crate::models::CommonsPartyMemberSummary>, thread_id: uuid::Uuid) -> CommonsPartySummary {
        CommonsPartySummary {
            party_id,
            create_ts,
            activity: Box::new(activity),
            external: Box::new(external),
            publicity: Box::new(publicity),
            party_size,
            members,
            thread_id,
        }
    }
}


