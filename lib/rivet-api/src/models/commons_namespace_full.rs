/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CommonsNamespaceFull : A full namespace.



#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct CommonsNamespaceFull {
    /// A universally unique identifier.
    #[serde(rename = "namespace_id")]
    pub namespace_id: String,
    /// RFC3339 timestamp.
    #[serde(rename = "create_ts")]
    pub create_ts: String,
    /// Represent a resource's readable display name.
    #[serde(rename = "display_name")]
    pub display_name: String,
    /// A universally unique identifier.
    #[serde(rename = "version_id")]
    pub version_id: String,
    /// A human readable short identifier used to references resources. Different than a `rivet.common#Uuid` because this is intended to be human readable. Different than `rivet.common#DisplayName` because this should not include special characters and be short.
    #[serde(rename = "name_id")]
    pub name_id: String,
    #[serde(rename = "config")]
    pub config: Box<crate::models::CommonsCloudNamespaceConfig>,
}

impl CommonsNamespaceFull {
    /// A full namespace.
    pub fn new(namespace_id: String, create_ts: String, display_name: String, version_id: String, name_id: String, config: crate::models::CommonsCloudNamespaceConfig) -> CommonsNamespaceFull {
        CommonsNamespaceFull {
            namespace_id,
            create_ts,
            display_name,
            version_id,
            name_id,
            config: Box::new(config),
        }
    }
}


