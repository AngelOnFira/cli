/*
 * Rivet API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Default, Serialize, Deserialize)]
pub struct IdentityListActivitiesOutput {
    #[serde(rename = "identities")]
    pub identities: Vec<crate::models::CommonsIdentityHandle>,
    #[serde(rename = "games")]
    pub games: Vec<crate::models::CommonsGameSummary>,
    #[serde(rename = "parties")]
    pub parties: Vec<crate::models::CommonsPartySummary>,
    #[serde(rename = "suggested_groups")]
    pub suggested_groups: Vec<crate::models::CommonsGroupSummary>,
    #[serde(rename = "suggested_players")]
    pub suggested_players: Vec<crate::models::CommonsIdentityHandle>,
    #[serde(rename = "watch")]
    pub watch: Box<crate::models::CommonsWatchResponse>,
}

impl IdentityListActivitiesOutput {
    pub fn new(identities: Vec<crate::models::CommonsIdentityHandle>, games: Vec<crate::models::CommonsGameSummary>, parties: Vec<crate::models::CommonsPartySummary>, suggested_groups: Vec<crate::models::CommonsGroupSummary>, suggested_players: Vec<crate::models::CommonsIdentityHandle>, watch: crate::models::CommonsWatchResponse) -> IdentityListActivitiesOutput {
        IdentityListActivitiesOutput {
            identities,
            games,
            parties,
            suggested_groups,
            suggested_players,
            watch: Box::new(watch),
        }
    }
}


